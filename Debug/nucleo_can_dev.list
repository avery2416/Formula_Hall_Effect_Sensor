
nucleo_can_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ec  080051ec  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002e0  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105cc  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ff  00000000  00000000  00017658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00019958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abb  00000000  00000000  0001a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b0f  00000000  00000000  0001b1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012824  00000000  00000000  0003ccea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc50  00000000  00000000  0004f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c15e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fc4  00000000  00000000  0011c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00120168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800512c 	.word	0x0800512c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800512c 	.word	0x0800512c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <MX_GPIO_Init>:
 */

#include "gpio_setup.h"

void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a35      	ldr	r2, [pc, #212]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a29      	ldr	r2, [pc, #164]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a23      	ldr	r2, [pc, #140]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_GPIO_Init+0xf0>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f001 f863 	bl	8001c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f000 feca 	bl	8001940 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bb6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <MX_GPIO_Init+0xf4>)
 8000bc4:	f000 febc 	bl	8001940 <HAL_GPIO_Init>

    /* Configure GPIO pin : PC7 (Hall Effect Sensor) */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Trigger interrupt on falling edge
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           // Enable pull-up
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <MX_GPIO_Init+0xf4>)
 8000bde:	f000 feaf 	bl	8001940 <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);     // Interrupt priority
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	2017      	movs	r0, #23
 8000be8:	f000 fe73 	bl	80018d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);             // Enable EXTI interrupt
 8000bec:	2017      	movs	r0, #23
 8000bee:	f000 fe8c 	bl	800190a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	@ 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800

08000c04 <hallEffectInit>:
								 float _brake_radius,
								 uint16_t _brake_disc_gaps,
								 TIM_HandleTypeDef *_counter,
								 TIM_HandleTypeDef *_timeOutTimer,
								 float _tuner,
								 uint16_t _interruptPin){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	61f8      	str	r0, [r7, #28]
 8000c0c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000c10:	edc7 0a05 	vstr	s1, [r7, #20]
 8000c14:	60fa      	str	r2, [r7, #12]
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	ed87 1a01 	vstr	s2, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	827b      	strh	r3, [r7, #18]
	_hf->isReady = 0;
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	_hf->brake_radius = _brake_radius;
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	61da      	str	r2, [r3, #28]
	_hf->wheel_radius = _wheel_radius;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	619a      	str	r2, [r3, #24]
	_hf->brake_disc_gaps = _brake_disc_gaps;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	8a7a      	ldrh	r2, [r7, #18]
 8000c38:	821a      	strh	r2, [r3, #16]
	_hf->counter = _counter;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	601a      	str	r2, [r3, #0]
	_hf->timeOutTimer = _timeOutTimer;
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	605a      	str	r2, [r3, #4]
	_hf->tuner = _tuner;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	621a      	str	r2, [r3, #32]
	_hf->clock_ratio = HAL_RCC_GetHCLKFreq()/(_hf->counter->Init.Prescaler+1);
 8000c4c:	f002 fa70 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8000c50:	4602      	mov	r2, r0
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	849a      	strh	r2, [r3, #36]	@ 0x24
	_hf->interruptPin = _interruptPin;
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000c68:	851a      	strh	r2, [r3, #40]	@ 0x28
	return HAL_TIM_Base_Start_IT(_hf->timeOutTimer);
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 fd2e 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <hallEffectCalculator>:

void hallEffectCalculator(hallEffectSensor *_hf, UART_HandleTypeDef *huart){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b0a2      	sub	sp, #136	@ 0x88
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	if(_hf->isReady==1){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 80a6 	bne.w	8000de2 <hallEffectCalculator+0x162>
		_hf->isReady = 0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_hf->time_current = __HAL_TIM_GET_COUNTER(_hf->counter);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
		uint32_t delta_time = _hf->time_current - _hf->time_previous;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	677b      	str	r3, [r7, #116]	@ 0x74
		_hf->rpm = (RPM_CONVERSION * _hf->clock_ratio) / (delta_time * _hf->brake_disc_gaps);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc3a 	bl	8000534 <__aeabi_i2d>
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8000df8 <hallEffectCalculator+0x178>)
 8000cc6:	f7ff fc9f 	bl	8000608 <__aeabi_dmul>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	8a1b      	ldrh	r3, [r3, #16]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff fdb6 	bl	800085c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fe98 	bl	8000a2c <__aeabi_d2uiz>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	825a      	strh	r2, [r3, #18]
		float wheel_angular_velocity = ((2 * PI * _hf->rpm) / 60.0) * (_hf->brake_radius / _hf->wheel_radius);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	8a5b      	ldrh	r3, [r3, #18]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fc13 	bl	8000534 <__aeabi_i2d>
 8000d0e:	a338      	add	r3, pc, #224	@ (adr r3, 8000df0 <hallEffectCalculator+0x170>)
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <hallEffectCalculator+0x178>)
 8000d26:	f7ff fd99 	bl	800085c <__aeabi_ddiv>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4614      	mov	r4, r2
 8000d30:	461d      	mov	r5, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	ed93 7a07 	vldr	s14, [r3, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d42:	ee16 0a90 	vmov	r0, s13
 8000d46:	f7ff fc07 	bl	8000558 <__aeabi_f2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4620      	mov	r0, r4
 8000d50:	4629      	mov	r1, r5
 8000d52:	f7ff fc59 	bl	8000608 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe85 	bl	8000a6c <__aeabi_d2f>
 8000d62:	4603      	mov	r3, r0
 8000d64:	673b      	str	r3, [r7, #112]	@ 0x70
		_hf->wheel_speed = wheel_angular_velocity * _hf->wheel_radius;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d6c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	edc3 7a05 	vstr	s15, [r3, #20]
		_hf->time_previous = _hf->time_current;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
		_hf->timeOutTimer->Instance->CNT = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24

		// Add UART transmission here
		uint8_t MSG[100] = {'\0'};
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2260      	movs	r2, #96	@ 0x60
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fd47 	bl	800482c <memset>

		// ✅ Use %u for uint16_t RPM and %lu for uint32_t delta_time
		sprintf((char *)MSG, "RPM: %u, Wheel Speed: %.2f m/s, Delta Time: %lu\r\n",
		        (uint16_t)_hf->rpm,                // Cast to uint16_t
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	8a5b      	ldrh	r3, [r3, #18]
		sprintf((char *)MSG, "RPM: %u, Wheel Speed: %.2f m/s, Delta Time: %lu\r\n",
 8000da2:	461c      	mov	r4, r3
		        (float)_hf->wheel_speed,           // Cast to float
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
		sprintf((char *)MSG, "RPM: %u, Wheel Speed: %.2f m/s, Delta Time: %lu\r\n",
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fbd5 	bl	8000558 <__aeabi_f2d>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	f107 000c 	add.w	r0, r7, #12
 8000db6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000db8:	9102      	str	r1, [sp, #8]
 8000dba:	e9cd 2300 	strd	r2, r3, [sp]
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	490e      	ldr	r1, [pc, #56]	@ (8000dfc <hallEffectCalculator+0x17c>)
 8000dc2:	f003 fd13 	bl	80047ec <siprintf>
		        (uint32_t)delta_time);             // Cast to uint32_t

		HAL_UART_Transmit(huart, MSG, strlen((char *)MSG), 100);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa08 	bl	80001e0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f107 010c 	add.w	r1, r7, #12
 8000dd8:	2364      	movs	r3, #100	@ 0x64
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f003 f88c 	bl	8003ef8 <HAL_UART_Transmit>
	}
	return;
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
}
 8000de4:	3778      	adds	r7, #120	@ 0x78
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	fc8b007a 	.word	0xfc8b007a
 8000df4:	401921fa 	.word	0x401921fa
 8000df8:	404e0000 	.word	0x404e0000
 8000dfc:	08005144 	.word	0x08005144

08000e00 <HAL_GPIO_EXTI_Callback>:


/* USER CODE END 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==hfs.interruptPin) hfs.isReady = 1;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d104      	bne.n	8000e1e <HAL_GPIO_EXTI_Callback+0x1e>
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	return;
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
}
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000128 	.word	0x20000128

08000e30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	if(htim==hfs.timeOutTimer) hfs.rpm = 0;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d103      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000e42:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	825a      	strh	r2, [r3, #18]
	return;
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
}
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000128 	.word	0x20000128

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e62:	f000 faf9 	bl	8001458 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e66:	f000 f839 	bl	8000edc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e6a:	f7ff fe4f 	bl	8000b0c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e6e:	f000 f8c7 	bl	8001000 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000e72:	f000 f891 	bl	8000f98 <MX_CAN_Init>
	MX_TIM2_Init();
 8000e76:	f000 fa25 	bl	80012c4 <MX_TIM2_Init>
	MX_TIM6_Init();
 8000e7a:	f000 fa75 	bl	8001368 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */


	if(HAL_TIM_Base_Start_IT(&htim2)!= HAL_OK) Error_Handler();
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <main+0x70>)
 8000e80:	f002 fc26 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <main+0x32>
 8000e8a:	f000 f8e9 	bl	8001060 <Error_Handler>

	// Initialize the HallEffectSensor Structure
	if(hallEffectInit(&hfs, 1, 1, 10, &htim2, &htim6, 1, GPIO_PIN_7)!= HAL_OK) Error_Handler();
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <main+0x74>)
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <main+0x70>)
 8000e9a:	210a      	movs	r1, #10
 8000e9c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ea0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <main+0x78>)
 8000ea6:	f7ff fead 	bl	8000c04 <hallEffectInit>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <main+0x58>
 8000eb0:	f000 f8d6 	bl	8001060 <Error_Handler>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Toggle an LED to show activity
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f000 fee3 	bl	8001c84 <HAL_GPIO_TogglePin>
//
//	    if (hallState == GPIO_PIN_RESET) {
//	    	hfs.isReady = 1;
//	    }

 		hallEffectCalculator(&hfs, &huart2);
 8000ebe:	4906      	ldr	r1, [pc, #24]	@ (8000ed8 <main+0x7c>)
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <main+0x78>)
 8000ec2:	f7ff fedd 	bl	8000c80 <hallEffectCalculator>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ec6:	bf00      	nop
 8000ec8:	e7f4      	b.n	8000eb4 <main+0x58>
 8000eca:	bf00      	nop
 8000ecc:	20000158 	.word	0x20000158
 8000ed0:	200001a4 	.word	0x200001a4
 8000ed4:	20000128 	.word	0x20000128
 8000ed8:	200000a0 	.word	0x200000a0

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0a6      	sub	sp, #152	@ 0x98
 8000ee0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ee6:	2228      	movs	r2, #40	@ 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fc9e 	bl	800482c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2258      	movs	r2, #88	@ 0x58
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fc90 	bl	800482c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f14:	2310      	movs	r3, #16
 8000f16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f28:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f36:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fed4 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000f46:	f000 f88b 	bl	8001060 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f64:	2102      	movs	r1, #2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 ff12 	bl	8002d90 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000f72:	f000 f875 	bl	8001060 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 f925 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000f8c:	f000 f868 	bl	8001060 <Error_Handler>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3798      	adds	r7, #152	@ 0x98
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000f9e:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <MX_CAN_Init+0x64>)
 8000fa0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_CAN_Init+0x60>)
 8000fe6:	f000 fa9d 	bl	8001524 <HAL_CAN_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_CAN_Init+0x5c>
	{
		Error_Handler();
 8000ff0:	f000 f836 	bl	8001060 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000078 	.word	0x20000078
 8000ffc:	40006400 	.word	0x40006400

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	@ (800105c <MX_USART2_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_USART2_UART_Init+0x58>)
 8001044:	f002 ff0a 	bl	8003e5c <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800104e:	f000 f807 	bl	8001060 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000a0 	.word	0x200000a0
 800105c:	40004400 	.word	0x40004400

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_MspInit+0x44>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <HAL_MspInit+0x44>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_MspInit+0x44>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x44>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x44>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fc0a 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <HAL_CAN_MspInit+0x80>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d129      	bne.n	800112a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_CAN_MspInit+0x84>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001106:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001118:	2309      	movs	r3, #9
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f000 fc0b 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40006400 	.word	0x40006400
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <HAL_UART_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0x80>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_UART_MspInit+0x80>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_MspInit+0x80>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_UART_MspInit+0x80>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <HAL_UART_MspInit+0x80>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_UART_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ac:	f000 fbc8 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f965 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}

0800121e <EXTI9_5_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001222:	2020      	movs	r0, #32
 8001224:	f000 fd48 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001228:	2080      	movs	r0, #128	@ 0x80
 800122a:	f000 fd45 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f003 faea 	bl	800483c <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20010000 	.word	0x20010000
 8001294:	00000400 	.word	0x00000400
 8001298:	20000154 	.word	0x20000154
 800129c:	20000340 	.word	0x20000340

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <MX_TIM2_Init>:
 * Uses the internal clock and free-runs for uptime tracking.
 * TIM2 is used to measure the time difference between consecutive
 * Hall effect sensor interrupts to calculate RPM.
 */
void MX_TIM2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <MX_TIM2_Init+0x9c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a24      	ldr	r2, [pc, #144]	@ (8001360 <MX_TIM2_Init+0x9c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <MX_TIM2_Init+0x9c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

    /* Configure TIM2 */
    htim2.Instance = TIM2;
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_TIM2_Init+0xa0>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e8:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 64000 - 1;             // 64 MHz / 64000 = 1 kHz (1 ms steps)
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <MX_TIM2_Init+0xa0>)
 80012ec:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80012f0:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_TIM2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 0xFFFFFFFF;               // Max period (32-bit counter)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_TIM2_Init+0xa0>)
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_TIM2_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_TIM2_Init+0xa0>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130c:	4815      	ldr	r0, [pc, #84]	@ (8001364 <MX_TIM2_Init+0xa0>)
 800130e:	f002 f97d 	bl	800360c <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x58>
    {
        Error_Handler();
 8001318:	f7ff fea2 	bl	8001060 <Error_Handler>
    }

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]

    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	@ (8001364 <MX_TIM2_Init+0xa0>)
 8001338:	f002 fb3c 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x82>
    {
        Error_Handler();
 8001342:	f7ff fe8d 	bl	8001060 <Error_Handler>
    }

    /* Enable TIM2 interrupt */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201c      	movs	r0, #28
 800134c:	f000 fac1 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001350:	201c      	movs	r0, #28
 8001352:	f000 fada 	bl	800190a <HAL_NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	20000158 	.word	0x20000158

08001368 <MX_TIM6_Init>:
 * @brief Initialize the Wheel Stop Timeout Timer (TIM6)
 * TIM6 is used to monitor the wheel's motion and set RPM to 0
 * if no signal is received within the timeout period.
 */
void MX_TIM6_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_TIM6_Init+0x68>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <MX_TIM6_Init+0x68>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <MX_TIM6_Init+0x68>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

    htim6.Instance = TIM6;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_TIM6_Init+0x70>)
 800138a:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 64000 - 1;             // 64 MHz / 64000 = 1 kHz (1 ms steps)
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 800138e:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001392:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 3000 - 1;                  // Timeout at 3 seconds (3000 ms)
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 800139c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80013a0:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <MX_TIM6_Init+0x6c>)
 80013aa:	f002 f92f 	bl	800360c <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM6_Init+0x50>
    {
        Error_Handler();
 80013b4:	f7ff fe54 	bl	8001060 <Error_Handler>
    }

    /* Enable TIM6 interrupt */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	2036      	movs	r0, #54	@ 0x36
 80013be:	f000 fa88 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013c2:	2036      	movs	r0, #54	@ 0x36
 80013c4:	f000 faa1 	bl	800190a <HAL_NVIC_EnableIRQ>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	200001a4 	.word	0x200001a4
 80013d8:	40001000 	.word	0x40001000

080013dc <TIM2_IRQHandler>:
 * @brief TIM2 interrupt request handler.
 * Handles the capture of time for RPM calculation based on
 * Hall effect sensor signal interrupts.
 */
void TIM2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <TIM2_IRQHandler+0x10>)
 80013e2:	f002 f9e5 	bl	80037b0 <HAL_TIM_IRQHandler>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000158 	.word	0x20000158

080013f0 <TIM6_DAC_IRQHandler>:
/**
 * @brief TIM6 interrupt request handler.
 * Handles the timeout event to set RPM to 0 when the wheel stops moving.
 */
void TIM6_DAC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim6);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <TIM6_DAC_IRQHandler+0x10>)
 80013f6:	f002 f9db 	bl	80037b0 <HAL_TIM_IRQHandler>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001a4 	.word	0x200001a4

08001404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001408:	f7ff ff4a 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopForever+0x6>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopForever+0xe>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopForever+0x16>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f003 fa09 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001436:	f7ff fd11 	bl	8000e5c <main>

0800143a <LoopForever>:

LoopForever:
    b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800143c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001448:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 800144c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001450:	2000033c 	.word	0x2000033c

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_Init+0x28>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_Init+0x28>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 fa27 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f808 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fdfa 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fa3f 	bl	8001926 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 fa07 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	200001f0 	.word	0x200001f0

0800150c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200001f0 	.word	0x200001f0

08001524 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0ed      	b.n	8001712 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fdb6 	bl	80010b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff ffd8 	bl	800150c <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800155e:	e012      	b.n	8001586 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001560:	f7ff ffd4 	bl	800150c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d90b      	bls.n	8001586 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0c5      	b.n	8001712 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e5      	beq.n	8001560 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0202 	bic.w	r2, r2, #2
 80015a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff ffb2 	bl	800150c <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015aa:	e012      	b.n	80015d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ac:	f7ff ffae 	bl	800150c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d90b      	bls.n	80015d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2205      	movs	r2, #5
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e09f      	b.n	8001712 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e5      	bne.n	80015ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e007      	b.n	800160a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7e5b      	ldrb	r3, [r3, #25]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d108      	bne.n	8001624 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e007      	b.n	8001634 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001632:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e9b      	ldrb	r3, [r3, #26]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e007      	b.n	800165e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0220 	bic.w	r2, r2, #32
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7edb      	ldrb	r3, [r3, #27]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0210 	bic.w	r2, r2, #16
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e007      	b.n	8001688 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0210 	orr.w	r2, r2, #16
 8001686:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0208 	orr.w	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e007      	b.n	80016b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0208 	bic.w	r2, r2, #8
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7f5b      	ldrb	r3, [r3, #29]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0204 	orr.w	r2, r2, #4
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e007      	b.n	80016dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	ea42 0103 	orr.w	r1, r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	@ (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	@ (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	@ (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff29 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff3e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff31 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e160      	b.n	8001c12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8152 	beq.w	8001c0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80ac 	beq.w	8001c0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001acc:	4a59      	ldr	r2, [pc, #356]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001af6:	d025      	beq.n	8001b44 <HAL_GPIO_Init+0x204>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4f      	ldr	r2, [pc, #316]	@ (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d01f      	beq.n	8001b40 <HAL_GPIO_Init+0x200>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4e      	ldr	r2, [pc, #312]	@ (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d019      	beq.n	8001b3c <HAL_GPIO_Init+0x1fc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4c      	ldr	r2, [pc, #304]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c48 <HAL_GPIO_Init+0x308>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1f0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e00c      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	e00a      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e008      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b44:	2300      	movs	r3, #0
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b56:	4937      	ldr	r1, [pc, #220]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b64:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b88:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8e:	4b30      	ldr	r3, [pc, #192]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bb2:	4a27      	ldr	r2, [pc, #156]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f ae97 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000c00 	.word	0x48000c00
 8001c44:	48001000 	.word	0x48001000
 8001c48:	48001400 	.word	0x48001400
 8001c4c:	48001800 	.word	0x48001800
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43d9      	mvns	r1, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cce:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f892 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f001 b83a 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 816f 	beq.w	8002002 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d24:	4bb5      	ldr	r3, [pc, #724]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4bb2      	ldr	r3, [pc, #712]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d15c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x10e>
 8001d3c:	4baf      	ldr	r3, [pc, #700]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d48:	d155      	bne.n	8001df6 <HAL_RCC_OscConfig+0x10e>
 8001d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0x94>
 8001d76:	4ba1      	ldr	r3, [pc, #644]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e015      	b.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d94:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001da4:	4b95      	ldr	r3, [pc, #596]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dac:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001db0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8111 	beq.w	8002000 <HAL_RCC_OscConfig+0x318>
 8001dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8108 	bne.w	8002000 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f000 bfc6 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12e>
 8001e08:	4b7c      	ldr	r3, [pc, #496]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e036      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x158>
 8001e26:	4b75      	ldr	r3, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a74      	ldr	r2, [pc, #464]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b72      	ldr	r3, [pc, #456]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a71      	ldr	r2, [pc, #452]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e021      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x184>
 8001e52:	4b6a      	ldr	r3, [pc, #424]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a69      	ldr	r2, [pc, #420]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b67      	ldr	r3, [pc, #412]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a66      	ldr	r2, [pc, #408]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e6c:	4b63      	ldr	r3, [pc, #396]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a62      	ldr	r2, [pc, #392]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d059      	beq.n	8001f48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb3a 	bl	800150c <HAL_GetTick>
 8001e98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fb35 	bl	800150c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bf67 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001ec8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x1fe>
 8001ee0:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x22a>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001efe:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f16:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001f1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001f1e:	fa92 f2a2 	rbit	r2, r2
 8001f22:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001f26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ab      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b6>
 8001f46:	e05c      	b.n	8002002 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fae0 	bl	800150c <HAL_GetTick>
 8001f4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff fadb 	bl	800150c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 bf0d 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8001f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f6c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001f7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2b2>
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2de>
 8001f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001fb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_RCC_OscConfig+0x314>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fca:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001fce:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001fda:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ab      	bne.n	8001f52 <HAL_RCC_OscConfig+0x26a>
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_OscConfig+0x31a>
 8001ffc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002006:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 817f 	beq.w	8002316 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002018:	4ba7      	ldr	r3, [pc, #668]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00c      	beq.n	800203e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002024:	4ba4      	ldr	r3, [pc, #656]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d173      	bne.n	8002118 <HAL_RCC_OscConfig+0x430>
 8002030:	4ba1      	ldr	r3, [pc, #644]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800203c:	d16c      	bne.n	8002118 <HAL_RCC_OscConfig+0x430>
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002050:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x386>
 8002068:	4b93      	ldr	r3, [pc, #588]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e013      	b.n	8002096 <HAL_RCC_OscConfig+0x3ae>
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002086:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002092:	4b89      	ldr	r3, [pc, #548]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	2202      	movs	r2, #2
 8002098:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800209c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80020a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCC_OscConfig+0x3f6>
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f000 be52 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	21f8      	movs	r1, #248	@ 0xf8
 80020f4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80020fc:	fa91 f1a1 	rbit	r1, r1
 8002100:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002104:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002108:	fab1 f181 	clz	r1, r1
 800210c:	b2c9      	uxtb	r1, r1
 800210e:	408b      	lsls	r3, r1
 8002110:	4969      	ldr	r1, [pc, #420]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e0fe      	b.n	8002316 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8088 	beq.w	800223a <HAL_RCC_OscConfig+0x552>
 800212a:	2301      	movs	r3, #1
 800212c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800213c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800214a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	461a      	mov	r2, r3
 8002152:	2301      	movs	r3, #1
 8002154:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f9d9 	bl	800150c <HAL_GetTick>
 800215a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff f9d4 	bl	800150c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d902      	bls.n	8002176 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	f000 be06 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002188:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4be>
 80021a0:	4b45      	ldr	r3, [pc, #276]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	e013      	b.n	80021ce <HAL_RCC_OscConfig+0x4e6>
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80021b8:	2302      	movs	r3, #2
 80021ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80021be:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80021ca:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	2202      	movs	r2, #2
 80021d0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80021d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80021e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f042 0220 	orr.w	r2, r2, #32
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f002 021f 	and.w	r2, r2, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0af      	beq.n	8002160 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	21f8      	movs	r1, #248	@ 0xf8
 8002216:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800221e:	fa91 f1a1 	rbit	r1, r1
 8002222:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002226:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800222a:	fab1 f181 	clz	r1, r1
 800222e:	b2c9      	uxtb	r1, r1
 8002230:	408b      	lsls	r3, r1
 8002232:	4921      	ldr	r1, [pc, #132]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e06d      	b.n	8002316 <HAL_RCC_OscConfig+0x62e>
 800223a:	2301      	movs	r3, #1
 800223c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800224c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800225a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	2300      	movs	r3, #0
 8002264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff f951 	bl	800150c <HAL_GetTick>
 800226a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002270:	f7ff f94c 	bl	800150c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d902      	bls.n	8002286 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	f000 bd7e 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002298:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCC_OscConfig+0x5d4>
 80022b0:	4b01      	ldr	r3, [pc, #4]	@ (80022b8 <HAL_RCC_OscConfig+0x5d0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e016      	b.n	80022e4 <HAL_RCC_OscConfig+0x5fc>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80022d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80022e0:	4bbf      	ldr	r3, [pc, #764]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80022ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80022f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ac      	bne.n	8002270 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8113 	beq.w	8002552 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d07c      	beq.n	8002436 <HAL_RCC_OscConfig+0x74e>
 800233c:	2301      	movs	r3, #1
 800233e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800234e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4ba2      	ldr	r3, [pc, #648]	@ (80025e4 <HAL_RCC_OscConfig+0x8fc>)
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	461a      	mov	r2, r3
 8002362:	2301      	movs	r3, #1
 8002364:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff f8d1 	bl	800150c <HAL_GetTick>
 800236a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff f8cc 	bl	800150c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d902      	bls.n	8002386 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	f000 bcfe 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002398:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023a6:	2202      	movs	r2, #2
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023ca:	2202      	movs	r2, #2
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b7e      	ldr	r3, [pc, #504]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 80023e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023f2:	2102      	movs	r1, #2
 80023f4:	6019      	str	r1, [r3, #0]
 80023f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f1a3 	rbit	r1, r3
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800240c:	6019      	str	r1, [r3, #0]
  return result;
 800240e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002412:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d09d      	beq.n	8002370 <HAL_RCC_OscConfig+0x688>
 8002434:	e08d      	b.n	8002552 <HAL_RCC_OscConfig+0x86a>
 8002436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002446:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002454:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002458:	601a      	str	r2, [r3, #0]
  return result;
 800245a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002462:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <HAL_RCC_OscConfig+0x8fc>)
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff f848 	bl	800150c <HAL_GetTick>
 800247c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff f843 	bl	800150c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d902      	bls.n	8002498 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	f000 bc75 	b.w	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024a0:	2202      	movs	r2, #2
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002502:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b36      	ldr	r3, [pc, #216]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 8002506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002510:	2102      	movs	r1, #2
 8002512:	6019      	str	r1, [r3, #0]
 8002514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002518:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f1a3 	rbit	r1, r3
 8002522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002526:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800252a:	6019      	str	r1, [r3, #0]
  return result;
 800252c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002530:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d197      	bne.n	8002482 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002556:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81a5 	beq.w	80028b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_RCC_OscConfig+0x8f8>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800258e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002592:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_RCC_OscConfig+0x900>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d121      	bne.n	80025f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_RCC_OscConfig+0x900>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_RCC_OscConfig+0x900>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c0:	f7fe ffa4 	bl	800150c <HAL_GetTick>
 80025c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e010      	b.n	80025ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fe ff9f 	bl	800150c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e3d1      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	10908120 	.word	0x10908120
 80025e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002824 <HAL_RCC_OscConfig+0xb3c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0e8      	beq.n	80025ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x92e>
 8002608:	4b87      	ldr	r3, [pc, #540]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a86      	ldr	r2, [pc, #536]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e035      	b.n	8002682 <HAL_RCC_OscConfig+0x99a>
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x958>
 8002626:	4b80      	ldr	r3, [pc, #512]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a7f      	ldr	r2, [pc, #508]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	4b7d      	ldr	r3, [pc, #500]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a7c      	ldr	r2, [pc, #496]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	e020      	b.n	8002682 <HAL_RCC_OscConfig+0x99a>
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d10c      	bne.n	800266a <HAL_RCC_OscConfig+0x982>
 8002650:	4b75      	ldr	r3, [pc, #468]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a74      	ldr	r2, [pc, #464]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	4b72      	ldr	r3, [pc, #456]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a71      	ldr	r2, [pc, #452]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x99a>
 800266a:	4b6f      	ldr	r3, [pc, #444]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a6e      	ldr	r2, [pc, #440]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b6c      	ldr	r3, [pc, #432]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a6b      	ldr	r2, [pc, #428]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8081 	beq.w	8002796 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe ff3a 	bl	800150c <HAL_GetTick>
 8002698:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe ff35 	bl	800150c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e365      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 80026b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002706:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0xa3a>
 800271c:	4b42      	ldr	r3, [pc, #264]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	e013      	b.n	800274a <HAL_RCC_OscConfig+0xa62>
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800272a:	2202      	movs	r2, #2
 800272c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002732:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002740:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b38      	ldr	r3, [pc, #224]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800274e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002752:	2102      	movs	r1, #2
 8002754:	6011      	str	r1, [r2, #0]
 8002756:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800275a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	fa92 f1a2 	rbit	r1, r2
 8002764:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002768:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800276c:	6011      	str	r1, [r2, #0]
  return result;
 800276e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002772:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d084      	beq.n	800269e <HAL_RCC_OscConfig+0x9b6>
 8002794:	e083      	b.n	800289e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe feb9 	bl	800150c <HAL_GetTick>
 800279a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe feb4 	bl	800150c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e2e4      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 80027b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027c0:	2202      	movs	r2, #2
 80027c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027e4:	2202      	movs	r2, #2
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027fe:	601a      	str	r2, [r3, #0]
  return result;
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002808:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0xb44>
 800281e:	4b02      	ldr	r3, [pc, #8]	@ (8002828 <HAL_RCC_OscConfig+0xb40>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	e017      	b.n	8002854 <HAL_RCC_OscConfig+0xb6c>
 8002824:	40007000 	.word	0x40007000
 8002828:	40021000 	.word	0x40021000
 800282c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002830:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4bb3      	ldr	r3, [pc, #716]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002858:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800285c:	2102      	movs	r1, #2
 800285e:	6011      	str	r1, [r2, #0]
 8002860:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002864:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	fa92 f1a2 	rbit	r1, r2
 800286e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002872:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002876:	6011      	str	r1, [r2, #0]
  return result;
 8002878:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800287c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d180      	bne.n	80027a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a9d      	ldr	r2, [pc, #628]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 825e 	beq.w	8002d80 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b96      	ldr	r3, [pc, #600]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f000 821f 	beq.w	8002d10 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 8170 	bne.w	8002bc4 <HAL_RCC_OscConfig+0xedc>
 80028e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002904:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002908:	601a      	str	r2, [r3, #0]
  return result;
 800290a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002912:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800291e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	461a      	mov	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fdef 	bl	800150c <HAL_GetTick>
 800292e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e009      	b.n	8002948 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fdea 	bl	800150c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e21c      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002968:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800296c:	601a      	str	r2, [r3, #0]
  return result;
 800296e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002972:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002976:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0xcaa>
 800298c:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	e027      	b.n	80029e2 <HAL_RCC_OscConfig+0xcfa>
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800299a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029ea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029ee:	6011      	str	r1, [r2, #0]
 80029f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	fa92 f1a2 	rbit	r1, r2
 80029fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a02:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002a06:	6011      	str	r1, [r2, #0]
  return result;
 8002a08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a0c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d182      	bne.n	8002934 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	4937      	ldr	r1, [pc, #220]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002a48:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a19      	ldr	r1, [r3, #32]
 8002a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	492d      	ldr	r1, [pc, #180]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a74:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a90:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a94:	601a      	str	r2, [r3, #0]
  return result;
 8002a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a9e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002aaa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fd29 	bl	800150c <HAL_GetTick>
 8002aba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002abe:	e009      	b.n	8002ad4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fd24 	bl	800150c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e156      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002af8:	601a      	str	r2, [r3, #0]
  return result;
 8002afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCC_OscConfig+0xe3c>
 8002b18:	4b01      	ldr	r3, [pc, #4]	@ (8002b20 <HAL_RCC_OscConfig+0xe38>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e02a      	b.n	8002b74 <HAL_RCC_OscConfig+0xe8c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b44:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	4b86      	ldr	r3, [pc, #536]	@ (8002d8c <HAL_RCC_OscConfig+0x10a4>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b94:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b9e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f43f af7f 	beq.w	8002ac0 <HAL_RCC_OscConfig+0xdd8>
 8002bc2:	e0dd      	b.n	8002d80 <HAL_RCC_OscConfig+0x1098>
 8002bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	fa93 f2a3 	rbit	r2, r3
 8002be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002be8:	601a      	str	r2, [r3, #0]
  return result;
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bf2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bfe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	2300      	movs	r3, #0
 8002c08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fc7f 	bl	800150c <HAL_GetTick>
 8002c0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	e009      	b.n	8002c28 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fc7a 	bl	800150c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0ac      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
 8002c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c4c:	601a      	str	r2, [r3, #0]
  return result;
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf8a>
 8002c6c:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <HAL_RCC_OscConfig+0x10a4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	e027      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfda>
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c84:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	4b33      	ldr	r3, [pc, #204]	@ (8002d8c <HAL_RCC_OscConfig+0x10a4>)
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cc6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cce:	6011      	str	r1, [r2, #0]
 8002cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cd4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	fa92 f1a2 	rbit	r1, r2
 8002cde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ce2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002ce6:	6011      	str	r1, [r2, #0]
  return result;
 8002ce8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cec:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	fab2 f282 	clz	r2, r2
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f042 0220 	orr.w	r2, r2, #32
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f002 021f 	and.w	r2, r2, #31
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d182      	bne.n	8002c14 <HAL_RCC_OscConfig+0xf2c>
 8002d0e:	e037      	b.n	8002d80 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e02e      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d24:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <HAL_RCC_OscConfig+0x10a4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_RCC_OscConfig+0x10a4>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002d38:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d117      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002d50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09e      	sub	sp, #120	@ 0x78
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e162      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b90      	ldr	r3, [pc, #576]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b8d      	ldr	r3, [pc, #564]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	498b      	ldr	r1, [pc, #556]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b89      	ldr	r3, [pc, #548]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e14a      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b82      	ldr	r3, [pc, #520]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	497f      	ldr	r1, [pc, #508]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80dc 	beq.w	8002fbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d13c      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xf6>
 8002e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xa6>
 8002e30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e00f      	b.n	8002e56 <HAL_RCC_ClockConfig+0xc6>
 8002e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e52:	4b67      	ldr	r3, [pc, #412]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e5e:	fa92 f2a2 	rbit	r2, r2
 8002e62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e66:	fab2 f282 	clz	r2, r2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f042 0220 	orr.w	r2, r2, #32
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f002 021f 	and.w	r2, r2, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d17b      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0f3      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d13c      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x178>
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x128>
 8002eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e00f      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x148>
 8002eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed4:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002edc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ede:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ee8:	fab2 f282 	clz	r2, r2
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f042 0220 	orr.w	r2, r2, #32
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	f002 021f 	and.w	r2, r2, #31
 8002ef8:	2101      	movs	r1, #1
 8002efa:	fa01 f202 	lsl.w	r2, r1, r2
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d13a      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b2      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1a0>
 8002f2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e00d      	b.n	8002f4c <HAL_RCC_ClockConfig+0x1bc>
 8002f30:	2302      	movs	r3, #2
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	61ba      	str	r2, [r7, #24]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	fa92 f2a2 	rbit	r2, r2
 8002f56:	617a      	str	r2, [r7, #20]
  return result;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	fab2 f282 	clz	r2, r2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 021f 	and.w	r2, r2, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e079      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	491a      	ldr	r1, [pc, #104]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fabe 	bl	800150c <HAL_GetTick>
 8002f90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fe faba 	bl	800150c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e061      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d214      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4906      	ldr	r1, [pc, #24]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e040      	b.n	800306e <HAL_RCC_ClockConfig+0x2de>
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_RCC_ClockConfig+0x2e8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	491a      	ldr	r1, [pc, #104]	@ (8003078 <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <HAL_RCC_ClockConfig+0x2e8>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4912      	ldr	r1, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x2e8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003032:	f000 f829 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003036:	4601      	mov	r1, r0
 8003038:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <HAL_RCC_ClockConfig+0x2e8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003040:	22f0      	movs	r2, #240	@ 0xf0
 8003042:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	fa92 f2a2 	rbit	r2, r2
 800304a:	60fa      	str	r2, [r7, #12]
  return result;
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	fab2 f282 	clz	r2, r2
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	40d3      	lsrs	r3, r2
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x2ec>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	fa21 f303 	lsr.w	r3, r1, r3
 800305e:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <HAL_RCC_ClockConfig+0x2f0>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_RCC_ClockConfig+0x2f4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fa0c 	bl	8001484 <HAL_InitTick>
  
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3778      	adds	r7, #120	@ 0x78
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	08005178 	.word	0x08005178
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x30>
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x36>
 80030b6:	e029      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	e029      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4a15      	ldr	r2, [pc, #84]	@ (800312c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e007      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	613b      	str	r3, [r7, #16]
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 800310e:	613b      	str	r3, [r7, #16]
      break;
 8003110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003112:	693b      	ldr	r3, [r7, #16]
}
 8003114:	4618      	mov	r0, r3
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40021000 	.word	0x40021000
 8003124:	007a1200 	.word	0x007a1200
 8003128:	08005190 	.word	0x08005190
 800312c:	080051a0 	.word	0x080051a0

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800314e:	f7ff ffef 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003152:	4601      	mov	r1, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800315c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003160:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	603a      	str	r2, [r7, #0]
  return result;
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08005188 	.word	0x08005188

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003192:	f7ff ffcd 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003196:	4601      	mov	r1, r0
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80031a0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80031a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	603a      	str	r2, [r7, #0]
  return result;
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	40d3      	lsrs	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08005188 	.word	0x08005188

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b092      	sub	sp, #72	@ 0x48
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80d4 	beq.w	800339c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b4b      	ldr	r3, [pc, #300]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a4a      	ldr	r2, [pc, #296]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b48      	ldr	r3, [pc, #288]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b45      	ldr	r3, [pc, #276]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b42      	ldr	r3, [pc, #264]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a41      	ldr	r2, [pc, #260]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe f969 	bl	800150c <HAL_GetTick>
 800323a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe f965 	bl	800150c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	@ 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1d6      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800325c:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003264:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8084 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003276:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003278:	429a      	cmp	r2, r3
 800327a:	d07c      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800327c:	4b2c      	ldr	r3, [pc, #176]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4b26      	ldr	r3, [pc, #152]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	461a      	mov	r2, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	461a      	mov	r2, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ce:	4a18      	ldr	r2, [pc, #96]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04b      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe f915 	bl	800150c <HAL_GetTick>
 80032e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe f911 	bl	800150c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e180      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80032fc:	2302      	movs	r3, #2
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	61fb      	str	r3, [r7, #28]
  return result;
 8003314:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d108      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800332a:	4b01      	ldr	r3, [pc, #4]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	e00d      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
 8003338:	10908100 	.word	0x10908100
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	4b9a      	ldr	r3, [pc, #616]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	2202      	movs	r2, #2
 800334e:	613a      	str	r2, [r7, #16]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	60fa      	str	r2, [r7, #12]
  return result;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	fab2 f282 	clz	r2, r2
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f002 021f 	and.w	r2, r2, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0b7      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003376:	4b8f      	ldr	r3, [pc, #572]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	498c      	ldr	r1, [pc, #560]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003388:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4a87      	ldr	r2, [pc, #540]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a8:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	497f      	ldr	r1, [pc, #508]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c6:	4b7b      	ldr	r3, [pc, #492]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4978      	ldr	r1, [pc, #480]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e4:	4b73      	ldr	r3, [pc, #460]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	4970      	ldr	r1, [pc, #448]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003402:	4b6c      	ldr	r3, [pc, #432]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4969      	ldr	r1, [pc, #420]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003420:	4b64      	ldr	r3, [pc, #400]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	4961      	ldr	r1, [pc, #388]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343e:	4b5d      	ldr	r3, [pc, #372]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f023 0220 	bic.w	r2, r3, #32
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	495a      	ldr	r1, [pc, #360]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345c:	4b55      	ldr	r3, [pc, #340]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	4952      	ldr	r1, [pc, #328]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800347a:	4b4e      	ldr	r3, [pc, #312]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	494b      	ldr	r1, [pc, #300]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003498:	4b46      	ldr	r3, [pc, #280]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4943      	ldr	r1, [pc, #268]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b6:	4b3f      	ldr	r3, [pc, #252]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	493c      	ldr	r1, [pc, #240]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034d4:	4b37      	ldr	r3, [pc, #220]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	4934      	ldr	r1, [pc, #208]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034f2:	4b30      	ldr	r3, [pc, #192]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	492d      	ldr	r1, [pc, #180]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	4925      	ldr	r1, [pc, #148]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800352e:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	491e      	ldr	r1, [pc, #120]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800354c:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	4916      	ldr	r1, [pc, #88]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	490f      	ldr	r1, [pc, #60]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003588:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003594:	4907      	ldr	r1, [pc, #28]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035a6:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	4913      	ldr	r1, [pc, #76]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80035cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d8:	490b      	ldr	r1, [pc, #44]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80035ea:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f6:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3748      	adds	r7, #72	@ 0x48
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e049      	b.n	80036b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f841 	bl	80036ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 faa4 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04f      	b.n	8003788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <HAL_TIM_Base_Start_IT+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003712:	d018      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	@ (8003798 <HAL_TIM_Base_Start_IT+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1e      	ldr	r2, [pc, #120]	@ (800379c <HAL_TIM_Base_Start_IT+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	@ (80037a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d115      	bne.n	8003772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HAL_TIM_Base_Start_IT+0xdc>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d015      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375e:	d011      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003770:	e008      	b.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e000      	b.n	8003786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40013400 	.word	0x40013400
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40015000 	.word	0x40015000
 80037ac:	00010007 	.word	0x00010007

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d020      	beq.n	8003814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0202 	mvn.w	r2, #2
 80037e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9ad 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f99f 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9b0 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d020      	beq.n	8003860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0204 	mvn.w	r2, #4
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f987 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f979 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f98a 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0208 	mvn.w	r2, #8
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2204      	movs	r2, #4
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f961 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f953 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f964 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d020      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0210 	mvn.w	r2, #16
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2208      	movs	r2, #8
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f93b 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f92d 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f93e 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0201 	mvn.w	r2, #1
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fa8a 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa7a 	bl	8003e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa72 	bl	8003e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8fd 	bl	8003b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0220 	mvn.w	r2, #32
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa3a 	bl	8003e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_ConfigClockSource+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b6      	b.n	8003b3e <HAL_TIM_ConfigClockSource+0x18a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0c:	d03e      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xd8>
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a12:	f200 8087 	bhi.w	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	f000 8086 	beq.w	8003b2a <HAL_TIM_ConfigClockSource+0x176>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a22:	d87f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a24:	2b70      	cmp	r3, #112	@ 0x70
 8003a26:	d01a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xaa>
 8003a28:	2b70      	cmp	r3, #112	@ 0x70
 8003a2a:	d87b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d050      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8003a30:	2b60      	cmp	r3, #96	@ 0x60
 8003a32:	d877      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a34:	2b50      	cmp	r3, #80	@ 0x50
 8003a36:	d03c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8003a38:	2b50      	cmp	r3, #80	@ 0x50
 8003a3a:	d873      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d058      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x13e>
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d86f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a44:	2b30      	cmp	r3, #48	@ 0x30
 8003a46:	d064      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15e>
 8003a48:	2b30      	cmp	r3, #48	@ 0x30
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15e>
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d867      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15e>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d05a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15e>
 8003a5c:	e062      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	f000 f9b7 	bl	8003de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	609a      	str	r2, [r3, #8]
      break;
 8003a8a:	e04f      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	f000 f9a0 	bl	8003de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 f914 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	@ 0x50
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f96d 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 f933 	bl	8003d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	@ 0x60
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f95d 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 f8f4 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	@ 0x40
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f94d 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 f944 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a48      	ldr	r2, [pc, #288]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a45      	ldr	r2, [pc, #276]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a44      	ldr	r2, [pc, #272]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a43      	ldr	r2, [pc, #268]	@ (8003cd8 <TIM_Base_SetConfig+0x140>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a42      	ldr	r2, [pc, #264]	@ (8003cdc <TIM_Base_SetConfig+0x144>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a37      	ldr	r2, [pc, #220]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf8:	d01b      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a34      	ldr	r2, [pc, #208]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d017      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <TIM_Base_SetConfig+0x140>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00f      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <TIM_Base_SetConfig+0x148>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <TIM_Base_SetConfig+0x14c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a30      	ldr	r2, [pc, #192]	@ (8003ce8 <TIM_Base_SetConfig+0x150>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_Base_SetConfig+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cdc <TIM_Base_SetConfig+0x144>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d108      	bne.n	8003c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x100>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a19      	ldr	r2, [pc, #100]	@ (8003cd8 <TIM_Base_SetConfig+0x140>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x100>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ce0 <TIM_Base_SetConfig+0x148>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x100>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a18      	ldr	r2, [pc, #96]	@ (8003ce4 <TIM_Base_SetConfig+0x14c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x100>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ce8 <TIM_Base_SetConfig+0x150>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x100>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <TIM_Base_SetConfig+0x144>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40015000 	.word	0x40015000
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 030a 	bic.w	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 0210 	bic.w	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f043 0307 	orr.w	r3, r3, #7
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e040      	b.n	8003ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd f95c 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	@ 0x24
 8003e88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa86 	bl	80043b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f8af 	bl	800400c <UART_SetConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01b      	b.n	8003ef0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fb05 	bl	80044f8 <UART_CheckIdleState>
 8003eee:	4603      	mov	r3, r0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	@ 0x28
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d177      	bne.n	8004000 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_UART_Transmit+0x24>
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e070      	b.n	8004002 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	@ 0x21
 8003f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd faed 	bl	800150c <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4c:	d108      	bne.n	8003f60 <HAL_UART_Transmit+0x68>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e003      	b.n	8003f68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f68:	e02f      	b.n	8003fca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fb67 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03b      	b.n	8004002 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	b292      	uxth	r2, r2
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e007      	b.n	8003fb8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1c9      	bne.n	8003f6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	@ 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fb31 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e005      	b.n	8004002 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b92      	ldr	r3, [pc, #584]	@ (8004280 <UART_SetConfig+0x274>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	430b      	orrs	r3, r1
 8004042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a80      	ldr	r2, [pc, #512]	@ (8004284 <UART_SetConfig+0x278>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d120      	bne.n	80040ca <UART_SetConfig+0xbe>
 8004088:	4b7f      	ldr	r3, [pc, #508]	@ (8004288 <UART_SetConfig+0x27c>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d817      	bhi.n	80040c4 <UART_SetConfig+0xb8>
 8004094:	a201      	add	r2, pc, #4	@ (adr r2, 800409c <UART_SetConfig+0x90>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040b9 	.word	0x080040b9
 80040a4:	080040bf 	.word	0x080040bf
 80040a8:	080040b3 	.word	0x080040b3
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0b5      	b.n	800421e <UART_SetConfig+0x212>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e0b2      	b.n	800421e <UART_SetConfig+0x212>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e0af      	b.n	800421e <UART_SetConfig+0x212>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e0ac      	b.n	800421e <UART_SetConfig+0x212>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0a9      	b.n	800421e <UART_SetConfig+0x212>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6f      	ldr	r2, [pc, #444]	@ (800428c <UART_SetConfig+0x280>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d124      	bne.n	800411e <UART_SetConfig+0x112>
 80040d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <UART_SetConfig+0x27c>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e0:	d011      	beq.n	8004106 <UART_SetConfig+0xfa>
 80040e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e6:	d817      	bhi.n	8004118 <UART_SetConfig+0x10c>
 80040e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ec:	d011      	beq.n	8004112 <UART_SetConfig+0x106>
 80040ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f2:	d811      	bhi.n	8004118 <UART_SetConfig+0x10c>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <UART_SetConfig+0xf4>
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fc:	d006      	beq.n	800410c <UART_SetConfig+0x100>
 80040fe:	e00b      	b.n	8004118 <UART_SetConfig+0x10c>
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e08b      	b.n	800421e <UART_SetConfig+0x212>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e088      	b.n	800421e <UART_SetConfig+0x212>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e085      	b.n	800421e <UART_SetConfig+0x212>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e082      	b.n	800421e <UART_SetConfig+0x212>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e07f      	b.n	800421e <UART_SetConfig+0x212>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5b      	ldr	r2, [pc, #364]	@ (8004290 <UART_SetConfig+0x284>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d124      	bne.n	8004172 <UART_SetConfig+0x166>
 8004128:	4b57      	ldr	r3, [pc, #348]	@ (8004288 <UART_SetConfig+0x27c>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004130:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004134:	d011      	beq.n	800415a <UART_SetConfig+0x14e>
 8004136:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800413a:	d817      	bhi.n	800416c <UART_SetConfig+0x160>
 800413c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004140:	d011      	beq.n	8004166 <UART_SetConfig+0x15a>
 8004142:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004146:	d811      	bhi.n	800416c <UART_SetConfig+0x160>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x148>
 800414c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004150:	d006      	beq.n	8004160 <UART_SetConfig+0x154>
 8004152:	e00b      	b.n	800416c <UART_SetConfig+0x160>
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e061      	b.n	800421e <UART_SetConfig+0x212>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e05e      	b.n	800421e <UART_SetConfig+0x212>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e05b      	b.n	800421e <UART_SetConfig+0x212>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e058      	b.n	800421e <UART_SetConfig+0x212>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e055      	b.n	800421e <UART_SetConfig+0x212>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a47      	ldr	r2, [pc, #284]	@ (8004294 <UART_SetConfig+0x288>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d124      	bne.n	80041c6 <UART_SetConfig+0x1ba>
 800417c:	4b42      	ldr	r3, [pc, #264]	@ (8004288 <UART_SetConfig+0x27c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004184:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004188:	d011      	beq.n	80041ae <UART_SetConfig+0x1a2>
 800418a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800418e:	d817      	bhi.n	80041c0 <UART_SetConfig+0x1b4>
 8004190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004194:	d011      	beq.n	80041ba <UART_SetConfig+0x1ae>
 8004196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800419a:	d811      	bhi.n	80041c0 <UART_SetConfig+0x1b4>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <UART_SetConfig+0x19c>
 80041a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x1a8>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x1b4>
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e037      	b.n	800421e <UART_SetConfig+0x212>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e034      	b.n	800421e <UART_SetConfig+0x212>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e031      	b.n	800421e <UART_SetConfig+0x212>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e02e      	b.n	800421e <UART_SetConfig+0x212>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e02b      	b.n	800421e <UART_SetConfig+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a33      	ldr	r2, [pc, #204]	@ (8004298 <UART_SetConfig+0x28c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d124      	bne.n	800421a <UART_SetConfig+0x20e>
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <UART_SetConfig+0x27c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80041d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041dc:	d011      	beq.n	8004202 <UART_SetConfig+0x1f6>
 80041de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0x208>
 80041e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041e8:	d011      	beq.n	800420e <UART_SetConfig+0x202>
 80041ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041ee:	d811      	bhi.n	8004214 <UART_SetConfig+0x208>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <UART_SetConfig+0x1f0>
 80041f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x1fc>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x208>
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x212>
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e00a      	b.n	800421e <UART_SetConfig+0x212>
 8004208:	2304      	movs	r3, #4
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e007      	b.n	800421e <UART_SetConfig+0x212>
 800420e:	2308      	movs	r3, #8
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e004      	b.n	800421e <UART_SetConfig+0x212>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e001      	b.n	800421e <UART_SetConfig+0x212>
 800421a:	2310      	movs	r3, #16
 800421c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004226:	d16b      	bne.n	8004300 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d838      	bhi.n	80042a0 <UART_SetConfig+0x294>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <UART_SetConfig+0x228>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	080042a1 	.word	0x080042a1
 8004244:	0800426f 	.word	0x0800426f
 8004248:	080042a1 	.word	0x080042a1
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080042a1 	.word	0x080042a1
 8004254:	08004277 	.word	0x08004277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004258:	f7fe ff76 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 800425c:	61b8      	str	r0, [r7, #24]
        break;
 800425e:	e024      	b.n	80042aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe ff94 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8004264:	61b8      	str	r0, [r7, #24]
        break;
 8004266:	e020      	b.n	80042aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <UART_SetConfig+0x290>)
 800426a:	61bb      	str	r3, [r7, #24]
        break;
 800426c:	e01d      	b.n	80042aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fe ff0b 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8004272:	61b8      	str	r0, [r7, #24]
        break;
 8004274:	e019      	b.n	80042aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427a:	61bb      	str	r3, [r7, #24]
        break;
 800427c:	e015      	b.n	80042aa <UART_SetConfig+0x29e>
 800427e:	bf00      	nop
 8004280:	efff69f3 	.word	0xefff69f3
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	40004400 	.word	0x40004400
 8004290:	40004800 	.word	0x40004800
 8004294:	40004c00 	.word	0x40004c00
 8004298:	40005000 	.word	0x40005000
 800429c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	77bb      	strb	r3, [r7, #30]
        break;
 80042a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d073      	beq.n	8004398 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	005a      	lsls	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d916      	bls.n	80042fa <UART_SetConfig+0x2ee>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d2:	d212      	bcs.n	80042fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f023 030f 	bic.w	r3, r3, #15
 80042dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	89fa      	ldrh	r2, [r7, #14]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e04e      	b.n	8004398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	77bb      	strb	r3, [r7, #30]
 80042fe:	e04b      	b.n	8004398 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d827      	bhi.n	8004356 <UART_SetConfig+0x34a>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <UART_SetConfig+0x300>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	08004357 	.word	0x08004357
 800431c:	08004347 	.word	0x08004347
 8004320:	08004357 	.word	0x08004357
 8004324:	08004357 	.word	0x08004357
 8004328:	08004357 	.word	0x08004357
 800432c:	0800434f 	.word	0x0800434f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe ff0a 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8004334:	61b8      	str	r0, [r7, #24]
        break;
 8004336:	e013      	b.n	8004360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe ff28 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 800433c:	61b8      	str	r0, [r7, #24]
        break;
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <UART_SetConfig+0x3a4>)
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e00c      	b.n	8004360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7fe fe9f 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800434a:	61b8      	str	r0, [r7, #24]
        break;
 800434c:	e008      	b.n	8004360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004352:	61bb      	str	r3, [r7, #24]
        break;
 8004354:	e004      	b.n	8004360 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	77bb      	strb	r3, [r7, #30]
        break;
 800435e:	bf00      	nop
    }

    if (pclk != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	085a      	lsrs	r2, r3, #1
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b0f      	cmp	r3, #15
 800437e:	d909      	bls.n	8004394 <UART_SetConfig+0x388>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004386:	d205      	bcs.n	8004394 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e001      	b.n	8004398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	007a1200 	.word	0x007a1200

080043b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01a      	beq.n	80044ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044b2:	d10a      	bne.n	80044ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b098      	sub	sp, #96	@ 0x60
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004508:	f7fd f800 	bl	800150c <HAL_GetTick>
 800450c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b08      	cmp	r3, #8
 800451a:	d12e      	bne.n	800457a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800451c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	2200      	movs	r2, #0
 8004526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f88c 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d021      	beq.n	800457a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454a:	653b      	str	r3, [r7, #80]	@ 0x50
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
 8004556:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800455a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e6      	bne.n	8004536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e062      	b.n	8004640 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d149      	bne.n	800461c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004590:	2200      	movs	r2, #0
 8004592:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f856 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d03c      	beq.n	800461c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	623b      	str	r3, [r7, #32]
   return(result);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e6      	bne.n	80045a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	617b      	str	r3, [r7, #20]
   return(result);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e011      	b.n	8004640 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3758      	adds	r7, #88	@ 0x58
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e04f      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d04b      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fc ff53 	bl	800150c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e04e      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d037      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b80      	cmp	r3, #128	@ 0x80
 800468e:	d034      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d031      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d110      	bne.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2208      	movs	r2, #8
 80046aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f838 	bl	8004722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2208      	movs	r2, #8
 80046b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e029      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d4:	d111      	bne.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f81e 	bl	8004722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00f      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d0a0      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004722:	b480      	push	{r7}
 8004724:	b095      	sub	sp, #84	@ 0x54
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800473e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800474e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	61fb      	str	r3, [r7, #28]
   return(result);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3308      	adds	r3, #8
 800477a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800477c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800477e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e5      	bne.n	800475c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	2b01      	cmp	r3, #1
 8004796:	d118      	bne.n	80047ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 0310 	bic.w	r3, r3, #16
 80047ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	613b      	str	r3, [r7, #16]
   return(result);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047de:	bf00      	nop
 80047e0:	3754      	adds	r7, #84	@ 0x54
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <siprintf>:
 80047ec:	b40e      	push	{r1, r2, r3}
 80047ee:	b500      	push	{lr}
 80047f0:	b09c      	sub	sp, #112	@ 0x70
 80047f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	9006      	str	r0, [sp, #24]
 80047f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047fc:	4809      	ldr	r0, [pc, #36]	@ (8004824 <siprintf+0x38>)
 80047fe:	9107      	str	r1, [sp, #28]
 8004800:	9104      	str	r1, [sp, #16]
 8004802:	4909      	ldr	r1, [pc, #36]	@ (8004828 <siprintf+0x3c>)
 8004804:	f853 2b04 	ldr.w	r2, [r3], #4
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	a902      	add	r1, sp, #8
 8004810:	f000 f994 	bl	8004b3c <_svfiprintf_r>
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	b01c      	add	sp, #112	@ 0x70
 800481c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004820:	b003      	add	sp, #12
 8004822:	4770      	bx	lr
 8004824:	2000000c 	.word	0x2000000c
 8004828:	ffff0208 	.word	0xffff0208

0800482c <memset>:
 800482c:	4402      	add	r2, r0
 800482e:	4603      	mov	r3, r0
 8004830:	4293      	cmp	r3, r2
 8004832:	d100      	bne.n	8004836 <memset+0xa>
 8004834:	4770      	bx	lr
 8004836:	f803 1b01 	strb.w	r1, [r3], #1
 800483a:	e7f9      	b.n	8004830 <memset+0x4>

0800483c <__errno>:
 800483c:	4b01      	ldr	r3, [pc, #4]	@ (8004844 <__errno+0x8>)
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4d0d      	ldr	r5, [pc, #52]	@ (8004880 <__libc_init_array+0x38>)
 800484c:	4c0d      	ldr	r4, [pc, #52]	@ (8004884 <__libc_init_array+0x3c>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	2600      	movs	r6, #0
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	4d0b      	ldr	r5, [pc, #44]	@ (8004888 <__libc_init_array+0x40>)
 800485a:	4c0c      	ldr	r4, [pc, #48]	@ (800488c <__libc_init_array+0x44>)
 800485c:	f000 fc66 	bl	800512c <_init>
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	2600      	movs	r6, #0
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	080051ec 	.word	0x080051ec
 8004884:	080051ec 	.word	0x080051ec
 8004888:	080051ec 	.word	0x080051ec
 800488c:	080051f0 	.word	0x080051f0

08004890 <__retarget_lock_acquire_recursive>:
 8004890:	4770      	bx	lr

08004892 <__retarget_lock_release_recursive>:
 8004892:	4770      	bx	lr

08004894 <_free_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	2900      	cmp	r1, #0
 800489a:	d041      	beq.n	8004920 <_free_r+0x8c>
 800489c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a0:	1f0c      	subs	r4, r1, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfb8      	it	lt
 80048a6:	18e4      	addlt	r4, r4, r3
 80048a8:	f000 f8e0 	bl	8004a6c <__malloc_lock>
 80048ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <_free_r+0x90>)
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	b933      	cbnz	r3, 80048c0 <_free_r+0x2c>
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	6014      	str	r4, [r2, #0]
 80048b6:	4628      	mov	r0, r5
 80048b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048bc:	f000 b8dc 	b.w	8004a78 <__malloc_unlock>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d908      	bls.n	80048d6 <_free_r+0x42>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	1821      	adds	r1, r4, r0
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf01      	itttt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	1809      	addeq	r1, r1, r0
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	e7ed      	b.n	80048b2 <_free_r+0x1e>
 80048d6:	461a      	mov	r2, r3
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b10b      	cbz	r3, 80048e0 <_free_r+0x4c>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d9fa      	bls.n	80048d6 <_free_r+0x42>
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	1850      	adds	r0, r2, r1
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d10b      	bne.n	8004900 <_free_r+0x6c>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	4401      	add	r1, r0
 80048ec:	1850      	adds	r0, r2, r1
 80048ee:	4283      	cmp	r3, r0
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	d1e0      	bne.n	80048b6 <_free_r+0x22>
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	4408      	add	r0, r1
 80048fc:	6010      	str	r0, [r2, #0]
 80048fe:	e7da      	b.n	80048b6 <_free_r+0x22>
 8004900:	d902      	bls.n	8004908 <_free_r+0x74>
 8004902:	230c      	movs	r3, #12
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	e7d6      	b.n	80048b6 <_free_r+0x22>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf04      	itt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	bf04      	itt	eq
 8004918:	1809      	addeq	r1, r1, r0
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6054      	str	r4, [r2, #4]
 800491e:	e7ca      	b.n	80048b6 <_free_r+0x22>
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	20000338 	.word	0x20000338

08004928 <sbrk_aligned>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4e0f      	ldr	r6, [pc, #60]	@ (8004968 <sbrk_aligned+0x40>)
 800492c:	460c      	mov	r4, r1
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	4605      	mov	r5, r0
 8004932:	b911      	cbnz	r1, 800493a <sbrk_aligned+0x12>
 8004934:	f000 fba6 	bl	8005084 <_sbrk_r>
 8004938:	6030      	str	r0, [r6, #0]
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 fba1 	bl	8005084 <_sbrk_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d103      	bne.n	800494e <sbrk_aligned+0x26>
 8004946:	f04f 34ff 	mov.w	r4, #4294967295
 800494a:	4620      	mov	r0, r4
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	1cc4      	adds	r4, r0, #3
 8004950:	f024 0403 	bic.w	r4, r4, #3
 8004954:	42a0      	cmp	r0, r4
 8004956:	d0f8      	beq.n	800494a <sbrk_aligned+0x22>
 8004958:	1a21      	subs	r1, r4, r0
 800495a:	4628      	mov	r0, r5
 800495c:	f000 fb92 	bl	8005084 <_sbrk_r>
 8004960:	3001      	adds	r0, #1
 8004962:	d1f2      	bne.n	800494a <sbrk_aligned+0x22>
 8004964:	e7ef      	b.n	8004946 <sbrk_aligned+0x1e>
 8004966:	bf00      	nop
 8004968:	20000334 	.word	0x20000334

0800496c <_malloc_r>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	1ccd      	adds	r5, r1, #3
 8004972:	f025 0503 	bic.w	r5, r5, #3
 8004976:	3508      	adds	r5, #8
 8004978:	2d0c      	cmp	r5, #12
 800497a:	bf38      	it	cc
 800497c:	250c      	movcc	r5, #12
 800497e:	2d00      	cmp	r5, #0
 8004980:	4606      	mov	r6, r0
 8004982:	db01      	blt.n	8004988 <_malloc_r+0x1c>
 8004984:	42a9      	cmp	r1, r5
 8004986:	d904      	bls.n	8004992 <_malloc_r+0x26>
 8004988:	230c      	movs	r3, #12
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	2000      	movs	r0, #0
 800498e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a68 <_malloc_r+0xfc>
 8004996:	f000 f869 	bl	8004a6c <__malloc_lock>
 800499a:	f8d8 3000 	ldr.w	r3, [r8]
 800499e:	461c      	mov	r4, r3
 80049a0:	bb44      	cbnz	r4, 80049f4 <_malloc_r+0x88>
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff ffbf 	bl	8004928 <sbrk_aligned>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	4604      	mov	r4, r0
 80049ae:	d158      	bne.n	8004a62 <_malloc_r+0xf6>
 80049b0:	f8d8 4000 	ldr.w	r4, [r8]
 80049b4:	4627      	mov	r7, r4
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	d143      	bne.n	8004a42 <_malloc_r+0xd6>
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d04b      	beq.n	8004a56 <_malloc_r+0xea>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	4639      	mov	r1, r7
 80049c2:	4630      	mov	r0, r6
 80049c4:	eb04 0903 	add.w	r9, r4, r3
 80049c8:	f000 fb5c 	bl	8005084 <_sbrk_r>
 80049cc:	4581      	cmp	r9, r0
 80049ce:	d142      	bne.n	8004a56 <_malloc_r+0xea>
 80049d0:	6821      	ldr	r1, [r4, #0]
 80049d2:	1a6d      	subs	r5, r5, r1
 80049d4:	4629      	mov	r1, r5
 80049d6:	4630      	mov	r0, r6
 80049d8:	f7ff ffa6 	bl	8004928 <sbrk_aligned>
 80049dc:	3001      	adds	r0, #1
 80049de:	d03a      	beq.n	8004a56 <_malloc_r+0xea>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	442b      	add	r3, r5
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	bb62      	cbnz	r2, 8004a48 <_malloc_r+0xdc>
 80049ee:	f8c8 7000 	str.w	r7, [r8]
 80049f2:	e00f      	b.n	8004a14 <_malloc_r+0xa8>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	1b52      	subs	r2, r2, r5
 80049f8:	d420      	bmi.n	8004a3c <_malloc_r+0xd0>
 80049fa:	2a0b      	cmp	r2, #11
 80049fc:	d917      	bls.n	8004a2e <_malloc_r+0xc2>
 80049fe:	1961      	adds	r1, r4, r5
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	6025      	str	r5, [r4, #0]
 8004a04:	bf18      	it	ne
 8004a06:	6059      	strne	r1, [r3, #4]
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	bf08      	it	eq
 8004a0c:	f8c8 1000 	streq.w	r1, [r8]
 8004a10:	5162      	str	r2, [r4, r5]
 8004a12:	604b      	str	r3, [r1, #4]
 8004a14:	4630      	mov	r0, r6
 8004a16:	f000 f82f 	bl	8004a78 <__malloc_unlock>
 8004a1a:	f104 000b 	add.w	r0, r4, #11
 8004a1e:	1d23      	adds	r3, r4, #4
 8004a20:	f020 0007 	bic.w	r0, r0, #7
 8004a24:	1ac2      	subs	r2, r0, r3
 8004a26:	bf1c      	itt	ne
 8004a28:	1a1b      	subne	r3, r3, r0
 8004a2a:	50a3      	strne	r3, [r4, r2]
 8004a2c:	e7af      	b.n	800498e <_malloc_r+0x22>
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	bf0c      	ite	eq
 8004a34:	f8c8 2000 	streq.w	r2, [r8]
 8004a38:	605a      	strne	r2, [r3, #4]
 8004a3a:	e7eb      	b.n	8004a14 <_malloc_r+0xa8>
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	6864      	ldr	r4, [r4, #4]
 8004a40:	e7ae      	b.n	80049a0 <_malloc_r+0x34>
 8004a42:	463c      	mov	r4, r7
 8004a44:	687f      	ldr	r7, [r7, #4]
 8004a46:	e7b6      	b.n	80049b6 <_malloc_r+0x4a>
 8004a48:	461a      	mov	r2, r3
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	d1fb      	bne.n	8004a48 <_malloc_r+0xdc>
 8004a50:	2300      	movs	r3, #0
 8004a52:	6053      	str	r3, [r2, #4]
 8004a54:	e7de      	b.n	8004a14 <_malloc_r+0xa8>
 8004a56:	230c      	movs	r3, #12
 8004a58:	6033      	str	r3, [r6, #0]
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 f80c 	bl	8004a78 <__malloc_unlock>
 8004a60:	e794      	b.n	800498c <_malloc_r+0x20>
 8004a62:	6005      	str	r5, [r0, #0]
 8004a64:	e7d6      	b.n	8004a14 <_malloc_r+0xa8>
 8004a66:	bf00      	nop
 8004a68:	20000338 	.word	0x20000338

08004a6c <__malloc_lock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	@ (8004a74 <__malloc_lock+0x8>)
 8004a6e:	f7ff bf0f 	b.w	8004890 <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20000330 	.word	0x20000330

08004a78 <__malloc_unlock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	@ (8004a80 <__malloc_unlock+0x8>)
 8004a7a:	f7ff bf0a 	b.w	8004892 <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20000330 	.word	0x20000330

08004a84 <__ssputs_r>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	42be      	cmp	r6, r7
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	4682      	mov	sl, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4690      	mov	r8, r2
 8004a96:	d82d      	bhi.n	8004af4 <__ssputs_r+0x70>
 8004a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aa0:	d026      	beq.n	8004af0 <__ssputs_r+0x6c>
 8004aa2:	6965      	ldr	r5, [r4, #20]
 8004aa4:	6909      	ldr	r1, [r1, #16]
 8004aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aaa:	eba3 0901 	sub.w	r9, r3, r1
 8004aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab2:	1c7b      	adds	r3, r7, #1
 8004ab4:	444b      	add	r3, r9
 8004ab6:	106d      	asrs	r5, r5, #1
 8004ab8:	429d      	cmp	r5, r3
 8004aba:	bf38      	it	cc
 8004abc:	461d      	movcc	r5, r3
 8004abe:	0553      	lsls	r3, r2, #21
 8004ac0:	d527      	bpl.n	8004b12 <__ssputs_r+0x8e>
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f7ff ff52 	bl	800496c <_malloc_r>
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b360      	cbz	r0, 8004b26 <__ssputs_r+0xa2>
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	464a      	mov	r2, r9
 8004ad0:	f000 fae8 	bl	80050a4 <memcpy>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	6126      	str	r6, [r4, #16]
 8004ae2:	6165      	str	r5, [r4, #20]
 8004ae4:	444e      	add	r6, r9
 8004ae6:	eba5 0509 	sub.w	r5, r5, r9
 8004aea:	6026      	str	r6, [r4, #0]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	463e      	mov	r6, r7
 8004af0:	42be      	cmp	r6, r7
 8004af2:	d900      	bls.n	8004af6 <__ssputs_r+0x72>
 8004af4:	463e      	mov	r6, r7
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	4632      	mov	r2, r6
 8004afa:	4641      	mov	r1, r8
 8004afc:	f000 faa8 	bl	8005050 <memmove>
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	1b9b      	subs	r3, r3, r6
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	4433      	add	r3, r6
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	462a      	mov	r2, r5
 8004b14:	f000 fad4 	bl	80050c0 <_realloc_r>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1e0      	bne.n	8004ae0 <__ssputs_r+0x5c>
 8004b1e:	6921      	ldr	r1, [r4, #16]
 8004b20:	4650      	mov	r0, sl
 8004b22:	f7ff feb7 	bl	8004894 <_free_r>
 8004b26:	230c      	movs	r3, #12
 8004b28:	f8ca 3000 	str.w	r3, [sl]
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e7e9      	b.n	8004b0e <__ssputs_r+0x8a>
	...

08004b3c <_svfiprintf_r>:
 8004b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	4698      	mov	r8, r3
 8004b42:	898b      	ldrh	r3, [r1, #12]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	b09d      	sub	sp, #116	@ 0x74
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	d510      	bpl.n	8004b72 <_svfiprintf_r+0x36>
 8004b50:	690b      	ldr	r3, [r1, #16]
 8004b52:	b973      	cbnz	r3, 8004b72 <_svfiprintf_r+0x36>
 8004b54:	2140      	movs	r1, #64	@ 0x40
 8004b56:	f7ff ff09 	bl	800496c <_malloc_r>
 8004b5a:	6028      	str	r0, [r5, #0]
 8004b5c:	6128      	str	r0, [r5, #16]
 8004b5e:	b930      	cbnz	r0, 8004b6e <_svfiprintf_r+0x32>
 8004b60:	230c      	movs	r3, #12
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	b01d      	add	sp, #116	@ 0x74
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	2340      	movs	r3, #64	@ 0x40
 8004b70:	616b      	str	r3, [r5, #20]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b76:	2320      	movs	r3, #32
 8004b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b80:	2330      	movs	r3, #48	@ 0x30
 8004b82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d20 <_svfiprintf_r+0x1e4>
 8004b86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b8a:	f04f 0901 	mov.w	r9, #1
 8004b8e:	4623      	mov	r3, r4
 8004b90:	469a      	mov	sl, r3
 8004b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b96:	b10a      	cbz	r2, 8004b9c <_svfiprintf_r+0x60>
 8004b98:	2a25      	cmp	r2, #37	@ 0x25
 8004b9a:	d1f9      	bne.n	8004b90 <_svfiprintf_r+0x54>
 8004b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004ba0:	d00b      	beq.n	8004bba <_svfiprintf_r+0x7e>
 8004ba2:	465b      	mov	r3, fp
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7ff ff6b 	bl	8004a84 <__ssputs_r>
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f000 80a7 	beq.w	8004d02 <_svfiprintf_r+0x1c6>
 8004bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bb6:	445a      	add	r2, fp
 8004bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bba:	f89a 3000 	ldrb.w	r3, [sl]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 809f 	beq.w	8004d02 <_svfiprintf_r+0x1c6>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bce:	f10a 0a01 	add.w	sl, sl, #1
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	9307      	str	r3, [sp, #28]
 8004bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bdc:	4654      	mov	r4, sl
 8004bde:	2205      	movs	r2, #5
 8004be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be4:	484e      	ldr	r0, [pc, #312]	@ (8004d20 <_svfiprintf_r+0x1e4>)
 8004be6:	f7fb fb03 	bl	80001f0 <memchr>
 8004bea:	9a04      	ldr	r2, [sp, #16]
 8004bec:	b9d8      	cbnz	r0, 8004c26 <_svfiprintf_r+0xea>
 8004bee:	06d0      	lsls	r0, r2, #27
 8004bf0:	bf44      	itt	mi
 8004bf2:	2320      	movmi	r3, #32
 8004bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bf8:	0711      	lsls	r1, r2, #28
 8004bfa:	bf44      	itt	mi
 8004bfc:	232b      	movmi	r3, #43	@ 0x2b
 8004bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c02:	f89a 3000 	ldrb.w	r3, [sl]
 8004c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c08:	d015      	beq.n	8004c36 <_svfiprintf_r+0xfa>
 8004c0a:	9a07      	ldr	r2, [sp, #28]
 8004c0c:	4654      	mov	r4, sl
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f04f 0c0a 	mov.w	ip, #10
 8004c14:	4621      	mov	r1, r4
 8004c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c1a:	3b30      	subs	r3, #48	@ 0x30
 8004c1c:	2b09      	cmp	r3, #9
 8004c1e:	d94b      	bls.n	8004cb8 <_svfiprintf_r+0x17c>
 8004c20:	b1b0      	cbz	r0, 8004c50 <_svfiprintf_r+0x114>
 8004c22:	9207      	str	r2, [sp, #28]
 8004c24:	e014      	b.n	8004c50 <_svfiprintf_r+0x114>
 8004c26:	eba0 0308 	sub.w	r3, r0, r8
 8004c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	46a2      	mov	sl, r4
 8004c34:	e7d2      	b.n	8004bdc <_svfiprintf_r+0xa0>
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	1d19      	adds	r1, r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfbb      	ittet	lt
 8004c42:	425b      	neglt	r3, r3
 8004c44:	f042 0202 	orrlt.w	r2, r2, #2
 8004c48:	9307      	strge	r3, [sp, #28]
 8004c4a:	9307      	strlt	r3, [sp, #28]
 8004c4c:	bfb8      	it	lt
 8004c4e:	9204      	strlt	r2, [sp, #16]
 8004c50:	7823      	ldrb	r3, [r4, #0]
 8004c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c54:	d10a      	bne.n	8004c6c <_svfiprintf_r+0x130>
 8004c56:	7863      	ldrb	r3, [r4, #1]
 8004c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c5a:	d132      	bne.n	8004cc2 <_svfiprintf_r+0x186>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	1d1a      	adds	r2, r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	9203      	str	r2, [sp, #12]
 8004c64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c68:	3402      	adds	r4, #2
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d30 <_svfiprintf_r+0x1f4>
 8004c70:	7821      	ldrb	r1, [r4, #0]
 8004c72:	2203      	movs	r2, #3
 8004c74:	4650      	mov	r0, sl
 8004c76:	f7fb fabb 	bl	80001f0 <memchr>
 8004c7a:	b138      	cbz	r0, 8004c8c <_svfiprintf_r+0x150>
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	eba0 000a 	sub.w	r0, r0, sl
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	4082      	lsls	r2, r0
 8004c86:	4313      	orrs	r3, r2
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	4824      	ldr	r0, [pc, #144]	@ (8004d24 <_svfiprintf_r+0x1e8>)
 8004c92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c96:	2206      	movs	r2, #6
 8004c98:	f7fb faaa 	bl	80001f0 <memchr>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d036      	beq.n	8004d0e <_svfiprintf_r+0x1d2>
 8004ca0:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <_svfiprintf_r+0x1ec>)
 8004ca2:	bb1b      	cbnz	r3, 8004cec <_svfiprintf_r+0x1b0>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	3307      	adds	r3, #7
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	3308      	adds	r3, #8
 8004cae:	9303      	str	r3, [sp, #12]
 8004cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb2:	4433      	add	r3, r6
 8004cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cb6:	e76a      	b.n	8004b8e <_svfiprintf_r+0x52>
 8004cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e7a8      	b.n	8004c14 <_svfiprintf_r+0xd8>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	3401      	adds	r4, #1
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 0c0a 	mov.w	ip, #10
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	3a30      	subs	r2, #48	@ 0x30
 8004cd6:	2a09      	cmp	r2, #9
 8004cd8:	d903      	bls.n	8004ce2 <_svfiprintf_r+0x1a6>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c6      	beq.n	8004c6c <_svfiprintf_r+0x130>
 8004cde:	9105      	str	r1, [sp, #20]
 8004ce0:	e7c4      	b.n	8004c6c <_svfiprintf_r+0x130>
 8004ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e7f0      	b.n	8004cce <_svfiprintf_r+0x192>
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <_svfiprintf_r+0x1f0>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	1c42      	adds	r2, r0, #1
 8004cfe:	4606      	mov	r6, r0
 8004d00:	d1d6      	bne.n	8004cb0 <_svfiprintf_r+0x174>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	065b      	lsls	r3, r3, #25
 8004d06:	f53f af2d 	bmi.w	8004b64 <_svfiprintf_r+0x28>
 8004d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d0c:	e72c      	b.n	8004b68 <_svfiprintf_r+0x2c>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <_svfiprintf_r+0x1f0>)
 8004d16:	a904      	add	r1, sp, #16
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f000 f879 	bl	8004e10 <_printf_i>
 8004d1e:	e7ed      	b.n	8004cfc <_svfiprintf_r+0x1c0>
 8004d20:	080051b0 	.word	0x080051b0
 8004d24:	080051ba 	.word	0x080051ba
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08004a85 	.word	0x08004a85
 8004d30:	080051b6 	.word	0x080051b6

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	3b00      	subs	r3, #0
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d90:	4641      	mov	r1, r8
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c8      	blx	r9
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf02      	ittt	eq
 8004da6:	68e5      	ldreq	r5, [r4, #12]
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	1aed      	subeq	r5, r5, r3
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4641      	mov	r1, r8
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c8      	blx	r9
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	@ 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4641      	mov	r1, r8
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c8      	blx	r9
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e18:	2f78      	cmp	r7, #120	@ 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	@ 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d2 	beq.w	8004fd6 <_printf_i+0x1c6>
 8004e32:	2f58      	cmp	r7, #88	@ 0x58
 8004e34:	f000 80b9 	beq.w	8004faa <_printf_i+0x19a>
 8004e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fbd 	.word	0x08004fbd
 8004e80:	08004ee7 	.word	0x08004ee7
 8004e84:	08004f77 	.word	0x08004f77
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004fdf 	.word	0x08004fdf
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004ee7 	.word	0x08004ee7
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004f7f 	.word	0x08004f7f
 8004ea8:	6833      	ldr	r3, [r6, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6032      	str	r2, [r6, #0]
 8004eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09d      	b.n	8004ff8 <_printf_i+0x1e8>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	6031      	str	r1, [r6, #0]
 8004ec4:	0606      	lsls	r6, r0, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0xbc>
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	e003      	b.n	8004ed4 <_printf_i+0xc4>
 8004ecc:	0645      	lsls	r5, r0, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0xb8>
 8004ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	da03      	bge.n	8004ee0 <_printf_i+0xd0>
 8004ed8:	232d      	movs	r3, #45	@ 0x2d
 8004eda:	426d      	negs	r5, r5
 8004edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee0:	4859      	ldr	r0, [pc, #356]	@ (8005048 <_printf_i+0x238>)
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	e011      	b.n	8004f0a <_printf_i+0xfa>
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	0608      	lsls	r0, r1, #24
 8004eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ef0:	d402      	bmi.n	8004ef8 <_printf_i+0xe8>
 8004ef2:	0649      	lsls	r1, r1, #25
 8004ef4:	bf48      	it	mi
 8004ef6:	b2ad      	uxthmi	r5, r5
 8004ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004efa:	4853      	ldr	r0, [pc, #332]	@ (8005048 <_printf_i+0x238>)
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	bf14      	ite	ne
 8004f00:	230a      	movne	r3, #10
 8004f02:	2308      	moveq	r3, #8
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f0a:	6866      	ldr	r6, [r4, #4]
 8004f0c:	60a6      	str	r6, [r4, #8]
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90d      	cbnz	r5, 8004f20 <_printf_i+0x110>
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d04b      	beq.n	8004fb8 <_printf_i+0x1a8>
 8004f20:	4616      	mov	r6, r2
 8004f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f26:	fb03 5711 	mls	r7, r3, r1, r5
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f30:	462f      	mov	r7, r5
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460d      	mov	r5, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x112>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x144>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07df      	lsls	r7, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x144>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	@ 0x30
 8004f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f54:	1b92      	subs	r2, r2, r6
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee6 	bl	8004d34 <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14a      	bne.n	8005002 <_printf_i+0x1f2>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f043 0320 	orr.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	4833      	ldr	r0, [pc, #204]	@ (800504c <_printf_i+0x23c>)
 8004f80:	2778      	movs	r7, #120	@ 0x78
 8004f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	6831      	ldr	r1, [r6, #0]
 8004f8a:	061f      	lsls	r7, r3, #24
 8004f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0x188>
 8004f92:	065f      	lsls	r7, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	6031      	str	r1, [r6, #0]
 8004f9a:	07d9      	lsls	r1, r3, #31
 8004f9c:	bf44      	itt	mi
 8004f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa2:	6023      	strmi	r3, [r4, #0]
 8004fa4:	b11d      	cbz	r5, 8004fae <_printf_i+0x19e>
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7ac      	b.n	8004f04 <_printf_i+0xf4>
 8004faa:	4827      	ldr	r0, [pc, #156]	@ (8005048 <_printf_i+0x238>)
 8004fac:	e7e9      	b.n	8004f82 <_printf_i+0x172>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f023 0320 	bic.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	e7f6      	b.n	8004fa6 <_printf_i+0x196>
 8004fb8:	4616      	mov	r6, r2
 8004fba:	e7bd      	b.n	8004f38 <_printf_i+0x128>
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6030      	str	r0, [r6, #0]
 8004fc6:	062e      	lsls	r6, r5, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1c0>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1c6>
 8004fd0:	0668      	lsls	r0, r5, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1bc>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4616      	mov	r6, r2
 8004fdc:	e7bc      	b.n	8004f58 <_printf_i+0x148>
 8004fde:	6833      	ldr	r3, [r6, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb f900 	bl	80001f0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1e6>
 8004ff2:	1b80      	subs	r0, r0, r6
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005000:	e7aa      	b.n	8004f58 <_printf_i+0x148>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	4632      	mov	r2, r6
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ad      	beq.n	8004f6c <_printf_i+0x15c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x22e>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a6      	b.n	8004f70 <_printf_i+0x160>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09d      	beq.n	8004f6c <_printf_i+0x15c>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x212>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x206>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x222>
 8005046:	bf00      	nop
 8005048:	080051c1 	.word	0x080051c1
 800504c:	080051d2 	.word	0x080051d2

08005050 <memmove>:
 8005050:	4288      	cmp	r0, r1
 8005052:	b510      	push	{r4, lr}
 8005054:	eb01 0402 	add.w	r4, r1, r2
 8005058:	d902      	bls.n	8005060 <memmove+0x10>
 800505a:	4284      	cmp	r4, r0
 800505c:	4623      	mov	r3, r4
 800505e:	d807      	bhi.n	8005070 <memmove+0x20>
 8005060:	1e43      	subs	r3, r0, #1
 8005062:	42a1      	cmp	r1, r4
 8005064:	d008      	beq.n	8005078 <memmove+0x28>
 8005066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800506e:	e7f8      	b.n	8005062 <memmove+0x12>
 8005070:	4402      	add	r2, r0
 8005072:	4601      	mov	r1, r0
 8005074:	428a      	cmp	r2, r1
 8005076:	d100      	bne.n	800507a <memmove+0x2a>
 8005078:	bd10      	pop	{r4, pc}
 800507a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800507e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005082:	e7f7      	b.n	8005074 <memmove+0x24>

08005084 <_sbrk_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d06      	ldr	r5, [pc, #24]	@ (80050a0 <_sbrk_r+0x1c>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fc f8d0 	bl	8001234 <_sbrk>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_sbrk_r+0x1a>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_sbrk_r+0x1a>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	2000032c 	.word	0x2000032c

080050a4 <memcpy>:
 80050a4:	440a      	add	r2, r1
 80050a6:	4291      	cmp	r1, r2
 80050a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ac:	d100      	bne.n	80050b0 <memcpy+0xc>
 80050ae:	4770      	bx	lr
 80050b0:	b510      	push	{r4, lr}
 80050b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ba:	4291      	cmp	r1, r2
 80050bc:	d1f9      	bne.n	80050b2 <memcpy+0xe>
 80050be:	bd10      	pop	{r4, pc}

080050c0 <_realloc_r>:
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	4680      	mov	r8, r0
 80050c6:	4615      	mov	r5, r2
 80050c8:	460c      	mov	r4, r1
 80050ca:	b921      	cbnz	r1, 80050d6 <_realloc_r+0x16>
 80050cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d0:	4611      	mov	r1, r2
 80050d2:	f7ff bc4b 	b.w	800496c <_malloc_r>
 80050d6:	b92a      	cbnz	r2, 80050e4 <_realloc_r+0x24>
 80050d8:	f7ff fbdc 	bl	8004894 <_free_r>
 80050dc:	2400      	movs	r4, #0
 80050de:	4620      	mov	r0, r4
 80050e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e4:	f000 f81a 	bl	800511c <_malloc_usable_size_r>
 80050e8:	4285      	cmp	r5, r0
 80050ea:	4606      	mov	r6, r0
 80050ec:	d802      	bhi.n	80050f4 <_realloc_r+0x34>
 80050ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050f2:	d8f4      	bhi.n	80050de <_realloc_r+0x1e>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fc38 	bl	800496c <_malloc_r>
 80050fc:	4607      	mov	r7, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0ec      	beq.n	80050dc <_realloc_r+0x1c>
 8005102:	42b5      	cmp	r5, r6
 8005104:	462a      	mov	r2, r5
 8005106:	4621      	mov	r1, r4
 8005108:	bf28      	it	cs
 800510a:	4632      	movcs	r2, r6
 800510c:	f7ff ffca 	bl	80050a4 <memcpy>
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fbbe 	bl	8004894 <_free_r>
 8005118:	463c      	mov	r4, r7
 800511a:	e7e0      	b.n	80050de <_realloc_r+0x1e>

0800511c <_malloc_usable_size_r>:
 800511c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005120:	1f18      	subs	r0, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	bfbc      	itt	lt
 8005126:	580b      	ldrlt	r3, [r1, r0]
 8005128:	18c0      	addlt	r0, r0, r3
 800512a:	4770      	bx	lr

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
