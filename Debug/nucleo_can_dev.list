
nucleo_can_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005858  08005858  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005858  08005858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005860  08005860  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005864  08005864  00006864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005868  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000308  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010719  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002347  00000000  00000000  000177a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00019af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac1  00000000  00000000  0001a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b0f  00000000  00000000  0001b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001288c  00000000  00000000  0003ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc70  00000000  00000000  0004f71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c38c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fe8  00000000  00000000  0011c3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800579c 	.word	0x0800579c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800579c 	.word	0x0800579c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <MX_GPIO_Init>:
 */

#include "gpio_setup.h"

void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b3f      	ldr	r3, [pc, #252]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b39      	ldr	r3, [pc, #228]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a38      	ldr	r2, [pc, #224]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b36      	ldr	r3, [pc, #216]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a32      	ldr	r2, [pc, #200]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f001 fb9b 	bl	80022c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f001 fa02 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bb6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4818      	ldr	r0, [pc, #96]	@ (8000c24 <MX_GPIO_Init+0x118>)
 8000bc4:	f001 f9f4 	bl	8001fb0 <HAL_GPIO_Init>

    /* Configure GPIO pin : PC7 (Hall Effect Sensor) */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Trigger interrupt on falling edge
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;           // Enable pull-up
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <MX_GPIO_Init+0x118>)
 8000bde:	f001 f9e7 	bl	8001fb0 <HAL_GPIO_Init>

    /* Configure CAN pins: PA11 (CAN_RX) and PA12 (CAN_TX) */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000be2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN; // Set the alternate function for CAN
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f001 f9d5 	bl	8001fb0 <HAL_GPIO_Init>

	/* Enable and set EXTI line interrupt priority */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);     // Interrupt priority
 8000c06:	2200      	movs	r2, #0
 8000c08:	2102      	movs	r1, #2
 8000c0a:	2017      	movs	r0, #23
 8000c0c:	f001 f999 	bl	8001f42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);             // Enable EXTI interrupt
 8000c10:	2017      	movs	r0, #23
 8000c12:	f001 f9b2 	bl	8001f7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000800 	.word	0x48000800

08000c28 <hallEffectInit>:
								 float _brake_radius,
								 uint16_t _brake_disc_gaps,
								 TIM_HandleTypeDef *_counter,
								 TIM_HandleTypeDef *_timeOutTimer,
								 float _tuner,
								 uint16_t _interruptPin){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	61f8      	str	r0, [r7, #28]
 8000c30:	ed87 0a06 	vstr	s0, [r7, #24]
 8000c34:	edc7 0a05 	vstr	s1, [r7, #20]
 8000c38:	60fa      	str	r2, [r7, #12]
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	ed87 1a01 	vstr	s2, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	827b      	strh	r3, [r7, #18]
	_hf->isReady = 0;
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	_hf->brake_radius = _brake_radius;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	61da      	str	r2, [r3, #28]
	_hf->wheel_radius = _wheel_radius;
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	619a      	str	r2, [r3, #24]
	_hf->brake_disc_gaps = _brake_disc_gaps;
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	8a7a      	ldrh	r2, [r7, #18]
 8000c5c:	821a      	strh	r2, [r3, #16]
	_hf->counter = _counter;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	601a      	str	r2, [r3, #0]
	_hf->timeOutTimer = _timeOutTimer;
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	605a      	str	r2, [r3, #4]
	_hf->tuner = _tuner;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	621a      	str	r2, [r3, #32]
	_hf->clock_ratio = HAL_RCC_GetHCLKFreq()/(_hf->counter->Init.Prescaler+1);
 8000c70:	f002 fd96 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 8000c74:	4602      	mov	r2, r0
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	849a      	strh	r2, [r3, #36]	@ 0x24
	_hf->interruptPin = _interruptPin;
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
	return HAL_TIM_Base_Start_IT(_hf->timeOutTimer);
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f854 	bl	8003d40 <HAL_TIM_Base_Start_IT>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	0000      	movs	r0, r0
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <hallEffectCalculator>:

void hallEffectCalculator(hallEffectSensor *_hf, UART_HandleTypeDef *huart){
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b0a0      	sub	sp, #128	@ 0x80
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	if(_hf->isReady==1){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	f040 80bd 	bne.w	8000e38 <hallEffectCalculator+0x190>
		_hf->isReady = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_hf->time_current = __HAL_TIM_GET_COUNTER(_hf->counter);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
		uint32_t delta_time = _hf->time_current - _hf->time_previous;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	677b      	str	r3, [r7, #116]	@ 0x74
		_hf->rpm = (RPM_CONVERSION * _hf->clock_ratio) / (delta_time * _hf->brake_disc_gaps);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc26 	bl	8000534 <__aeabi_i2d>
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	4b56      	ldr	r3, [pc, #344]	@ (8000e48 <hallEffectCalculator+0x1a0>)
 8000cee:	f7ff fc8b 	bl	8000608 <__aeabi_dmul>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	4614      	mov	r4, r2
 8000cf8:	461d      	mov	r5, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	8a1b      	ldrh	r3, [r3, #16]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fc04 	bl	8000514 <__aeabi_ui2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	f7ff fda2 	bl	800085c <__aeabi_ddiv>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f7ff fe84 	bl	8000a2c <__aeabi_d2uiz>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	825a      	strh	r2, [r3, #18]
		float wheel_angular_velocity = ((2 * PI * _hf->rpm) / 60.0) * (_hf->brake_radius / _hf->wheel_radius);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	8a5b      	ldrh	r3, [r3, #18]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbff 	bl	8000534 <__aeabi_i2d>
 8000d36:	a342      	add	r3, pc, #264	@ (adr r3, 8000e40 <hallEffectCalculator+0x198>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fc64 	bl	8000608 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e48 <hallEffectCalculator+0x1a0>)
 8000d4e:	f7ff fd85 	bl	800085c <__aeabi_ddiv>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4614      	mov	r4, r2
 8000d58:	461d      	mov	r5, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d6a:	ee16 0a90 	vmov	r0, s13
 8000d6e:	f7ff fbf3 	bl	8000558 <__aeabi_f2d>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4620      	mov	r0, r4
 8000d78:	4629      	mov	r1, r5
 8000d7a:	f7ff fc45 	bl	8000608 <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fe71 	bl	8000a6c <__aeabi_d2f>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	673b      	str	r3, [r7, #112]	@ 0x70
		_hf->wheel_speed = wheel_angular_velocity * _hf->wheel_radius;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d94:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	edc3 7a05 	vstr	s15, [r3, #20]
		_hf->time_previous = _hf->time_current;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60da      	str	r2, [r3, #12]
		_hf->timeOutTimer->Instance->CNT = 0;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24

		// Add UART transmission here
		uint8_t MSG[100] = {'\0'};
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2260      	movs	r2, #96	@ 0x60
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 f86b 	bl	8004e9c <memset>
//		sprintf((char *)MSG, "RPM: %u, Wheel Speed: %.2f m/s, Delta Time: %lu\r\n",
//		        (uint16_t)_hf->rpm,                // Cast to uint16_t
//		        (float)_hf->wheel_speed,           // Cast to float
//		        (uint32_t)delta_time);             // Cast to uint32_t

		int speed_int = (int)(_hf->wheel_speed * 100); // Multiply by 100 for 2 decimal places
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dcc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000e4c <hallEffectCalculator+0x1a4>
 8000dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd8:	ee17 3a90 	vmov	r3, s15
 8000ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
		sprintf((char *)MSG, "RPM: %u,\t Wheel Speed: %d.%02d m/s,\t Delta Time: %lu\r\n",
		        (uint16_t)_hf->rpm,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	8a5b      	ldrh	r3, [r3, #18]
		sprintf((char *)MSG, "RPM: %u,\t Wheel Speed: %d.%02d m/s,\t Delta Time: %lu\r\n",
 8000de2:	461d      	mov	r5, r3
 8000de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000de6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e50 <hallEffectCalculator+0x1a8>)
 8000de8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dec:	1152      	asrs	r2, r2, #5
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <hallEffectCalculator+0x1a8>)
 8000df6:	fb83 1302 	smull	r1, r3, r3, r2
 8000dfa:	1159      	asrs	r1, r3, #5
 8000dfc:	17d3      	asrs	r3, r2, #31
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	2164      	movs	r1, #100	@ 0x64
 8000e02:	fb01 f303 	mul.w	r3, r1, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000e0e:	9201      	str	r2, [sp, #4]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	4623      	mov	r3, r4
 8000e14:	462a      	mov	r2, r5
 8000e16:	490f      	ldr	r1, [pc, #60]	@ (8000e54 <hallEffectCalculator+0x1ac>)
 8000e18:	f004 f820 	bl	8004e5c <siprintf>
		        speed_int / 100, speed_int % 100,
		        (uint32_t)delta_time);

		HAL_UART_Transmit(huart, MSG, strlen((char *)MSG), 100);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9dd 	bl	80001e0 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0108 	add.w	r1, r7, #8
 8000e2e:	2364      	movs	r3, #100	@ 0x64
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f003 fb99 	bl	8004568 <HAL_UART_Transmit>
	}
	return;
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
}
 8000e3a:	3778      	adds	r7, #120	@ 0x78
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	fc8b007a 	.word	0xfc8b007a
 8000e44:	401921fa 	.word	0x401921fa
 8000e48:	404e0000 	.word	0x404e0000
 8000e4c:	42c80000 	.word	0x42c80000
 8000e50:	51eb851f 	.word	0x51eb851f
 8000e54:	080057b4 	.word	0x080057b4

08000e58 <HAL_GPIO_EXTI_Callback>:


/* USER CODE END 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==hfs.interruptPin) hfs.isReady = 1;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d104      	bne.n	8000e76 <HAL_GPIO_EXTI_Callback+0x1e>
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	return;
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
}
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000150 	.word	0x20000150

08000e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(htim==hfs.timeOutTimer) hfs.rpm = 0;
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d103      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	825a      	strh	r2, [r3, #18]
	return;
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
}
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000150 	.word	0x20000150

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eba:	f000 fb79 	bl	80015b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ebe:	f000 f85b 	bl	8000f78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec2:	f7ff fe23 	bl	8000b0c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ec6:	f000 f8b5 	bl	8001034 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000eca:	f000 f8e3 	bl	8001094 <MX_CAN_Init>
	MX_TIM2_Init();
 8000ece:	f000 faa5 	bl	800141c <MX_TIM2_Init>
	MX_TIM6_Init();
 8000ed2:	f000 faf5 	bl	80014c0 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	// Start hall effect timer
	if(HAL_TIM_Base_Start_IT(&htim2)!= HAL_OK) Error_Handler();
 8000ed6:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <main+0xb0>)
 8000ed8:	f002 ff32 	bl	8003d40 <HAL_TIM_Base_Start_IT>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <main+0x32>
 8000ee2:	f000 f969 	bl	80011b8 <Error_Handler>

	// Initialize the HallEffectSensor Structure
	if(hallEffectInit(&hfs, 1, 1, 10, &htim2, &htim6, 1, GPIO_PIN_7)!= HAL_OK) Error_Handler();
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <main+0xb4>)
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <main+0xb0>)
 8000ef2:	210a      	movs	r1, #10
 8000ef4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ef8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000efc:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <main+0xb8>)
 8000efe:	f7ff fe93 	bl	8000c28 <hallEffectInit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <main+0x58>
 8000f08:	f000 f956 	bl	80011b8 <Error_Handler>

	// Start can communication
	// Start CAN communication
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 8000f0c:	4818      	ldr	r0, [pc, #96]	@ (8000f70 <main+0xbc>)
 8000f0e:	f000 fd9e 	bl	8001a4e <HAL_CAN_Start>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0x68>
 8000f18:	f000 f94e 	bl	80011b8 <Error_Handler>

	// Apply the CAN filter configuration
	CAN_Config_Filter();
 8000f1c:	f000 f8f0 	bl	8001100 <CAN_Config_Filter>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
	    // Toggle an LED to show activity
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f20:	2120      	movs	r1, #32
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f001 f9e5 	bl	80022f4 <HAL_GPIO_TogglePin>

	    // Check CAN status
	    uint32_t canError = HAL_CAN_GetError(&hcan);
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <main+0xbc>)
 8000f2c:	f000 ff21 	bl	8001d72 <HAL_CAN_GetError>
 8000f30:	6078      	str	r0, [r7, #4]
	    if (canError != HAL_CAN_ERROR_NONE) {
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d008      	beq.n	8000f4a <main+0x96>
	        // Reset CAN if there's an error
	        HAL_CAN_Stop(&hcan);
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <main+0xbc>)
 8000f3a:	f000 fdcc 	bl	8001ad6 <HAL_CAN_Stop>
	        HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	f000 fb9c 	bl	800167c <HAL_Delay>
	        HAL_CAN_Start(&hcan);
 8000f44:	480a      	ldr	r0, [pc, #40]	@ (8000f70 <main+0xbc>)
 8000f46:	f000 fd82 	bl	8001a4e <HAL_CAN_Start>
	    }

	    // Perform RPM calculation with hall effect flag
	    hallEffectCalculator(&hfs, &huart2);
 8000f4a:	490a      	ldr	r1, [pc, #40]	@ (8000f74 <main+0xc0>)
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <main+0xb8>)
 8000f4e:	f7ff feab 	bl	8000ca8 <hallEffectCalculator>

	    // Transmit RPM over CAN (only if no errors)
	    if (canError == HAL_CAN_ERROR_NONE) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e3      	bne.n	8000f20 <main+0x6c>
	        CAN_Send_RPM(hfs.rpm);
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <main+0xb8>)
 8000f5a:	8a5b      	ldrh	r3, [r3, #18]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f8fb 	bl	8001158 <CAN_Send_RPM>
	{
 8000f62:	e7dd      	b.n	8000f20 <main+0x6c>
 8000f64:	20000180 	.word	0x20000180
 8000f68:	200001cc 	.word	0x200001cc
 8000f6c:	20000150 	.word	0x20000150
 8000f70:	200000a0 	.word	0x200000a0
 8000f74:	200000c8 	.word	0x200000c8

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a6      	sub	sp, #152	@ 0x98
 8000f7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f82:	2228      	movs	r2, #40	@ 0x28
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 ff88 	bl	8004e9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2258      	movs	r2, #88	@ 0x58
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 ff7a 	bl	8004e9c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 f9be 	bl	8002358 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000fe2:	f000 f8e9 	bl	80011b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 8000ffc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f002 f9fc 	bl	8003400 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x9a>
 800100e:	f000 f8d3 	bl	80011b8 <Error_Handler>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fc0f 	bl	8003840 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xb4>
 8001028:	f000 f8c6 	bl	80011b8 <Error_Handler>
}
 800102c:	bf00      	nop
 800102e:	3798      	adds	r7, #152	@ 0x98
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <MX_USART2_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001078:	f003 fa28 	bl	80044cc <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x52>
 8001082:	f000 f899 	bl	80011b8 <Error_Handler>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000c8 	.word	0x200000c8
 8001090:	40004400 	.word	0x40004400

08001094 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_CAN_Init+0x64>)
 800109a:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <MX_CAN_Init+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010b2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80010b6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010be:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = ENABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	775a      	strb	r2, [r3, #29]

	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_CAN_Init+0x64>)
 80010e6:	f000 faed 	bl	80016c4 <HAL_CAN_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 80010f0:	f000 f862 	bl	80011b8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000a0 	.word	0x200000a0
 80010fc:	40006400 	.word	0x40006400

08001100 <CAN_Config_Filter>:
  * @brief  Configures the CAN.
  * @param  None
  * @retval None
  */
static void CAN_Config_Filter(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	FilterConfig.FilterBank = 0;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
	FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <CAN_Config_Filter+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
	FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
	FilterConfig.FilterIdHigh = 0x0000;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	FilterConfig.FilterIdLow = 0x0000;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <CAN_Config_Filter+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
	FilterConfig.FilterMaskIdHigh = 0x0000;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
	FilterConfig.FilterMaskIdLow = 0x0000;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <CAN_Config_Filter+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
	FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001130:	2201      	movs	r2, #1
 8001132:	61da      	str	r2, [r3, #28]
	FilterConfig.FilterActivation = ENABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <CAN_Config_Filter+0x50>)
 8001136:	2201      	movs	r2, #1
 8001138:	621a      	str	r2, [r3, #32]
//	FilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &FilterConfig) != HAL_OK) Error_Handler();
 800113a:	4905      	ldr	r1, [pc, #20]	@ (8001150 <CAN_Config_Filter+0x50>)
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <CAN_Config_Filter+0x54>)
 800113e:	f000 fbbc 	bl	80018ba <HAL_CAN_ConfigFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <CAN_Config_Filter+0x4c>
 8001148:	f000 f836 	bl	80011b8 <Error_Handler>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000078 	.word	0x20000078
 8001154:	200000a0 	.word	0x200000a0

08001158 <CAN_Send_RPM>:
/**
  * @brief  Prepares RPM data for CAN transmission.
  * @param  uint16_t rpm
  * @retval None
  */
void CAN_Send_RPM(uint16_t rpm) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t CanTX[8];
    uint32_t CanMailbox;

    TxHeader.StdId = 0x123;         // CAN ID
 8001162:	f240 1323 	movw	r3, #291	@ 0x123
 8001166:	61bb      	str	r3, [r7, #24]
    TxHeader.ExtId = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;      // Standard ID
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;    // Data frame
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 2;               // 2 bytes for RPM
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Pack RPM into 2 bytes
    CanTX[0] = (uint8_t)(rpm >> 8);    // MSB
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	743b      	strb	r3, [r7, #16]
    CanTX[1] = (uint8_t)(rpm & 0xFF);  // LSB
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	747b      	strb	r3, [r7, #17]

    // Check if there's a free mailbox before trying to send
    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <CAN_Send_RPM+0x5c>)
 8001190:	f000 fdba 	bl	8001d08 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <CAN_Send_RPM+0x54>
        // Only try to send if mailbox is available
        HAL_CAN_AddTxMessage(&hcan, &TxHeader, CanTX, &CanMailbox);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	f107 0210 	add.w	r2, r7, #16
 80011a2:	f107 0118 	add.w	r1, r7, #24
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <CAN_Send_RPM+0x5c>)
 80011a8:	f000 fcde 	bl	8001b68 <HAL_CAN_AddTxMessage>
        // Note: Not checking return value to avoid Error_Handler
    }
    // Simply return if no mailbox is available, we'll try again in the next cycle
}
 80011ac:	bf00      	nop
 80011ae:	3730      	adds	r7, #48	@ 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000a0 	.word	0x200000a0

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_MspInit+0x44>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <HAL_MspInit+0x44>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_MspInit+0x44>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <HAL_MspInit+0x44>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fe96 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a18      	ldr	r2, [pc, #96]	@ (800128c <HAL_CAN_MspInit+0x80>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d129      	bne.n	8001282 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 8001234:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_CAN_MspInit+0x84>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800125e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001270:	2309      	movs	r3, #9
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127e:	f000 fe97 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40006400 	.word	0x40006400
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <HAL_UART_MspInit+0x7c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d128      	bne.n	8001308 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_UART_MspInit+0x80>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e6:	230c      	movs	r3, #12
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f6:	2307      	movs	r3, #7
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f000 fe54 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40004400 	.word	0x40004400
 8001314:	40021000 	.word	0x40021000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f965 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <EXTI9_5_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800137a:	2020      	movs	r0, #32
 800137c:	f000 ffd4 	bl	8002328 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001380:	2080      	movs	r0, #128	@ 0x80
 8001382:	f000 ffd1 	bl	8002328 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f003 fd76 	bl	8004eac <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20010000 	.word	0x20010000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	2000017c 	.word	0x2000017c
 80013f4:	20000368 	.word	0x20000368

080013f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <MX_TIM2_Init>:
 * Uses the internal clock and free-runs for uptime tracking.
 * TIM2 is used to measure the time difference between consecutive
 * Hall effect sensor interrupts to calculate RPM.
 */
void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <MX_TIM2_Init+0x9c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <MX_TIM2_Init+0x9c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_TIM2_Init+0x9c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

    /* Configure TIM2 */
    htim2.Instance = TIM2;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_TIM2_Init+0xa0>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 64000 - 1;             // 64 MHz / 64000 = 1 kHz (1 ms steps)
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_TIM2_Init+0xa0>)
 8001444:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001448:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM2_Init+0xa0>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 0xFFFFFFFF;               // Max period (32-bit counter)
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM2_Init+0xa0>)
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_TIM2_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_TIM2_Init+0xa0>)
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	4815      	ldr	r0, [pc, #84]	@ (80014bc <MX_TIM2_Init+0xa0>)
 8001466:	f002 fc09 	bl	8003c7c <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x58>
    {
        Error_Handler();
 8001470:	f7ff fea2 	bl	80011b8 <Error_Handler>
    }

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	60bb      	str	r3, [r7, #8]

    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <MX_TIM2_Init+0xa0>)
 8001490:	f002 fdc8 	bl	8004024 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x82>
    {
        Error_Handler();
 800149a:	f7ff fe8d 	bl	80011b8 <Error_Handler>
    }

    /* Enable TIM2 interrupt */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	201c      	movs	r0, #28
 80014a4:	f000 fd4d 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a8:	201c      	movs	r0, #28
 80014aa:	f000 fd66 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	20000180 	.word	0x20000180

080014c0 <MX_TIM6_Init>:
 * @brief Initialize the Wheel Stop Timeout Timer (TIM6)
 * TIM6 is used to monitor the wheel's motion and set RPM to 0
 * if no signal is received within the timeout period.
 */
void MX_TIM6_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_TIM6_Init+0x68>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <MX_TIM6_Init+0x68>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_TIM6_Init+0x68>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

    htim6.Instance = TIM6;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_TIM6_Init+0x6c>)
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <MX_TIM6_Init+0x70>)
 80014e2:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 64000 - 1;             // 64 MHz / 64000 = 1 kHz (1 ms steps)
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_TIM6_Init+0x6c>)
 80014e6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80014ea:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_TIM6_Init+0x6c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 3000 - 1;                  // Timeout at 3 seconds (3000 ms)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_TIM6_Init+0x6c>)
 80014f4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80014f8:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_TIM6_Init+0x6c>)
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001500:	480a      	ldr	r0, [pc, #40]	@ (800152c <MX_TIM6_Init+0x6c>)
 8001502:	f002 fbbb 	bl	8003c7c <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM6_Init+0x50>
    {
        Error_Handler();
 800150c:	f7ff fe54 	bl	80011b8 <Error_Handler>
    }

    /* Enable TIM6 interrupt */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	2036      	movs	r0, #54	@ 0x36
 8001516:	f000 fd14 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151a:	2036      	movs	r0, #54	@ 0x36
 800151c:	f000 fd2d 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	200001cc 	.word	0x200001cc
 8001530:	40001000 	.word	0x40001000

08001534 <TIM2_IRQHandler>:
 * @brief TIM2 interrupt request handler.
 * Handles the capture of time for RPM calculation based on
 * Hall effect sensor signal interrupts.
 */
void TIM2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <TIM2_IRQHandler+0x10>)
 800153a:	f002 fc71 	bl	8003e20 <HAL_TIM_IRQHandler>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000180 	.word	0x20000180

08001548 <TIM6_DAC_IRQHandler>:
/**
 * @brief TIM6 interrupt request handler.
 * Handles the timeout event to set RPM to 0 when the wheel stops moving.
 */
void TIM6_DAC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim6);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM6_DAC_IRQHandler+0x10>)
 800154e:	f002 fc67 	bl	8003e20 <HAL_TIM_IRQHandler>
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001cc 	.word	0x200001cc

0800155c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff ff4a 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f003 fc95 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158e:	f7ff fc91 	bl	8000eb4 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015a0:	08005868 	.word	0x08005868
  ldr r2, =_sbss
 80015a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015a8:	20000364 	.word	0x20000364

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_Init+0x28>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <HAL_Init+0x28>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 fcb3 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fdfa 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fccb 	bl	8001f96 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 fc93 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	20000218 	.word	0x20000218

08001664 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;  
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000218 	.word	0x20000218

0800167c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0ed      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fd92 	bl	800120c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f8:	f7ff ffb4 	bl	8001664 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016fe:	e012      	b.n	8001726 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001700:	f7ff ffb0 	bl	8001664 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b0a      	cmp	r3, #10
 800170c:	d90b      	bls.n	8001726 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2205      	movs	r2, #5
 800171e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0c5      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0e5      	beq.n	8001700 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0202 	bic.w	r2, r2, #2
 8001742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001744:	f7ff ff8e 	bl	8001664 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800174a:	e012      	b.n	8001772 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800174c:	f7ff ff8a 	bl	8001664 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d90b      	bls.n	8001772 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2205      	movs	r2, #5
 800176a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e09f      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e5      	bne.n	800174c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7e5b      	ldrb	r3, [r3, #25]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e9b      	ldrb	r3, [r3, #26]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e007      	b.n	80017fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0220 	bic.w	r2, r2, #32
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7edb      	ldrb	r3, [r3, #27]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0210 	bic.w	r2, r2, #16
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0210 	orr.w	r2, r2, #16
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7f1b      	ldrb	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0208 	orr.w	r2, r2, #8
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7f5b      	ldrb	r3, [r3, #29]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0204 	orr.w	r2, r2, #4
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	ea42 0103 	orr.w	r1, r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018d2:	7cfb      	ldrb	r3, [r7, #19]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d003      	beq.n	80018e0 <HAL_CAN_ConfigFilter+0x26>
 80018d8:	7cfb      	ldrb	r3, [r7, #19]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f040 80aa 	bne.w	8001a34 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	2201      	movs	r2, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d123      	bne.n	8001962 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	401a      	ands	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800193c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3248      	adds	r2, #72	@ 0x48
 8001942:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001956:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001958:	6979      	ldr	r1, [r7, #20]
 800195a:	3348      	adds	r3, #72	@ 0x48
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d122      	bne.n	80019b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800198a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3248      	adds	r2, #72	@ 0x48
 8001990:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019a6:	6979      	ldr	r1, [r7, #20]
 80019a8:	3348      	adds	r3, #72	@ 0x48
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019ca:	e007      	b.n	80019dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019f6:	e007      	b.n	8001a08 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d107      	bne.n	8001a20 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a26:	f023 0201 	bic.w	r2, r3, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e006      	b.n	8001a42 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d12e      	bne.n	8001ac0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff fdf3 	bl	8001664 <HAL_GetTick>
 8001a7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a80:	e012      	b.n	8001aa8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a82:	f7ff fdef 	bl	8001664 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b0a      	cmp	r3, #10
 8001a8e:	d90b      	bls.n	8001aa8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e012      	b.n	8001ace <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1e5      	bne.n	8001a82 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e006      	b.n	8001ace <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d133      	bne.n	8001b52 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001afa:	f7ff fdb3 	bl	8001664 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b00:	e012      	b.n	8001b28 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b02:	f7ff fdaf 	bl	8001664 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d90b      	bls.n	8001b28 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2205      	movs	r2, #5
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01b      	b.n	8001b60 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0e5      	beq.n	8001b02 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0202 	bic.w	r2, r2, #2
 8001b44:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e006      	b.n	8001b60 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	@ 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d003      	beq.n	8001b94 <HAL_CAN_AddTxMessage+0x2c>
 8001b8c:	7ffb      	ldrb	r3, [r7, #31]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	f040 80ad 	bne.w	8001cee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8095 	beq.w	8001cde <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	0e1b      	lsrs	r3, r3, #24
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	6809      	ldr	r1, [r1, #0]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3318      	adds	r3, #24
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	440b      	add	r3, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e00f      	b.n	8001c0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3318      	adds	r3, #24
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	440b      	add	r3, r1
 8001c0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3318      	adds	r3, #24
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	7d1b      	ldrb	r3, [r3, #20]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d111      	bne.n	8001c4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6811      	ldr	r1, [r2, #0]
 8001c3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3318      	adds	r3, #24
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	440b      	add	r3, r1
 8001c48:	3304      	adds	r3, #4
 8001c4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3307      	adds	r3, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	061a      	lsls	r2, r3, #24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3306      	adds	r3, #6
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3305      	adds	r3, #5
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4313      	orrs	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	3204      	adds	r2, #4
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	4610      	mov	r0, r2
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6811      	ldr	r1, [r2, #0]
 8001c74:	ea43 0200 	orr.w	r2, r3, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3303      	adds	r3, #3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	061a      	lsls	r2, r3, #24
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	ea43 0200 	orr.w	r2, r3, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cb8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3318      	adds	r3, #24
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6811      	ldr	r1, [r2, #0]
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	440b      	add	r3, r1
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e00e      	b.n	8001cfc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e006      	b.n	8001cfc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
  }
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3724      	adds	r7, #36	@ 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d002      	beq.n	8001d28 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d11d      	bne.n	8001d64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	@ (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	@ (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e160      	b.n	8002282 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8152 	beq.w	800227c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80ac 	beq.w	800227c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b5e      	ldr	r3, [pc, #376]	@ (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a5d      	ldr	r2, [pc, #372]	@ (80022a0 <HAL_GPIO_Init+0x2f0>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_GPIO_Init+0x2f0>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a59      	ldr	r2, [pc, #356]	@ (80022a4 <HAL_GPIO_Init+0x2f4>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002166:	d025      	beq.n	80021b4 <HAL_GPIO_Init+0x204>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a4f      	ldr	r2, [pc, #316]	@ (80022a8 <HAL_GPIO_Init+0x2f8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d01f      	beq.n	80021b0 <HAL_GPIO_Init+0x200>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4e      	ldr	r2, [pc, #312]	@ (80022ac <HAL_GPIO_Init+0x2fc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d019      	beq.n	80021ac <HAL_GPIO_Init+0x1fc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4d      	ldr	r2, [pc, #308]	@ (80022b0 <HAL_GPIO_Init+0x300>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_Init+0x1f8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4c      	ldr	r2, [pc, #304]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1f4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4b      	ldr	r2, [pc, #300]	@ (80022b8 <HAL_GPIO_Init+0x308>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1f0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4a      	ldr	r2, [pc, #296]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1ec>
 8002198:	2306      	movs	r3, #6
 800219a:	e00c      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 800219c:	2307      	movs	r3, #7
 800219e:	e00a      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021a0:	2305      	movs	r3, #5
 80021a2:	e008      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021a4:	2304      	movs	r3, #4
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x206>
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c6:	4937      	ldr	r1, [pc, #220]	@ (80022a4 <HAL_GPIO_Init+0x2f4>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d4:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021f8:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fe:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002222:	4a27      	ldr	r2, [pc, #156]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002252:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f ae97 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	48001000 	.word	0x48001000
 80022b8:	48001400 	.word	0x48001400
 80022bc:	48001800 	.word	0x48001800
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43d9      	mvns	r1, r3
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	400b      	ands	r3, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fd86 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800235e:	af00      	add	r7, sp, #0
 8002360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002364:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002368:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f001 b83a 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 816f 	beq.w	8002672 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002394:	4bb5      	ldr	r3, [pc, #724]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a0:	4bb2      	ldr	r3, [pc, #712]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d15c      	bne.n	8002466 <HAL_RCC_OscConfig+0x10e>
 80023ac:	4baf      	ldr	r3, [pc, #700]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b8:	d155      	bne.n	8002466 <HAL_RCC_OscConfig+0x10e>
 80023ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023be:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0x94>
 80023e6:	4ba1      	ldr	r3, [pc, #644]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e015      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
 80023ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002404:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002408:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002414:	4b95      	ldr	r3, [pc, #596]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800241c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002420:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800242c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f042 0220 	orr.w	r2, r2, #32
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f202 	lsl.w	r2, r1, r2
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8111 	beq.w	8002670 <HAL_RCC_OscConfig+0x318>
 800244e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002452:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8108 	bne.w	8002670 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 bfc6 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x12e>
 8002478:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7b      	ldr	r2, [pc, #492]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e036      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x158>
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a74      	ldr	r2, [pc, #464]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b72      	ldr	r3, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e021      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 80024b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x184>
 80024c2:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a69      	ldr	r2, [pc, #420]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b67      	ldr	r3, [pc, #412]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a66      	ldr	r2, [pc, #408]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 80024dc:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a62      	ldr	r2, [pc, #392]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b60      	ldr	r3, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5f      	ldr	r2, [pc, #380]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d059      	beq.n	80025b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f8ae 	bl	8001664 <HAL_GetTick>
 8002508:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250e:	f7ff f8a9 	bl	8001664 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d902      	bls.n	8002524 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	f000 bf67 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002528:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002538:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0x1fe>
 8002550:	4b46      	ldr	r3, [pc, #280]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x22a>
 8002556:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800256a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800256e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002572:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800257e:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002586:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800258a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800258e:	fa92 f2a2 	rbit	r2, r2
 8002592:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002596:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800259a:	fab2 f282 	clz	r2, r2
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f002 021f 	and.w	r2, r2, #31
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ab      	beq.n	800250e <HAL_RCC_OscConfig+0x1b6>
 80025b6:	e05c      	b.n	8002672 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f854 	bl	8001664 <HAL_GetTick>
 80025bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c2:	f7ff f84f 	bl	8001664 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d902      	bls.n	80025d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f000 bf0d 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 80025d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025dc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80025ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_RCC_OscConfig+0x2b2>
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x2de>
 800260a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800260e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800261e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002622:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002626:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_RCC_OscConfig+0x314>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800263a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800263e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002642:	fa92 f2a2 	rbit	r2, r2
 8002646:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800264a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ab      	bne.n	80025c2 <HAL_RCC_OscConfig+0x26a>
 800266a:	e002      	b.n	8002672 <HAL_RCC_OscConfig+0x31a>
 800266c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002676:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 817f 	beq.w	8002986 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002688:	4ba7      	ldr	r3, [pc, #668]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002694:	4ba4      	ldr	r3, [pc, #656]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d173      	bne.n	8002788 <HAL_RCC_OscConfig+0x430>
 80026a0:	4ba1      	ldr	r3, [pc, #644]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80026a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ac:	d16c      	bne.n	8002788 <HAL_RCC_OscConfig+0x430>
 80026ae:	2302      	movs	r3, #2
 80026b0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80026c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_RCC_OscConfig+0x386>
 80026d8:	4b93      	ldr	r3, [pc, #588]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e013      	b.n	8002706 <HAL_RCC_OscConfig+0x3ae>
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80026f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2202      	movs	r2, #2
 8002708:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800270c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002710:	fa92 f2a2 	rbit	r2, r2
 8002714:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002718:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800271c:	fab2 f282 	clz	r2, r2
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f042 0220 	orr.w	r2, r2, #32
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f002 021f 	and.w	r2, r2, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCC_OscConfig+0x3f6>
 8002738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f000 be52 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b76      	ldr	r3, [pc, #472]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	21f8      	movs	r1, #248	@ 0xf8
 8002764:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800276c:	fa91 f1a1 	rbit	r1, r1
 8002770:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002774:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002778:	fab1 f181 	clz	r1, r1
 800277c:	b2c9      	uxtb	r1, r1
 800277e:	408b      	lsls	r3, r1
 8002780:	4969      	ldr	r1, [pc, #420]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e0fe      	b.n	8002986 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8088 	beq.w	80028aa <HAL_RCC_OscConfig+0x552>
 800279a:	2301      	movs	r3, #1
 800279c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80027ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	461a      	mov	r2, r3
 80027c2:	2301      	movs	r3, #1
 80027c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe ff4d 	bl	8001664 <HAL_GetTick>
 80027ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe ff48 	bl	8001664 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d902      	bls.n	80027e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f000 be06 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80027f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d102      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
 8002810:	4b45      	ldr	r3, [pc, #276]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e013      	b.n	800283e <HAL_RCC_OscConfig+0x4e6>
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800282e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800283a:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	2202      	movs	r2, #2
 8002840:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002844:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002848:	fa92 f2a2 	rbit	r2, r2
 800284c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002850:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0af      	beq.n	80027d0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	21f8      	movs	r1, #248	@ 0xf8
 8002886:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800288e:	fa91 f1a1 	rbit	r1, r1
 8002892:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002896:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800289a:	fab1 f181 	clz	r1, r1
 800289e:	b2c9      	uxtb	r1, r1
 80028a0:	408b      	lsls	r3, r1
 80028a2:	4921      	ldr	r1, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e06d      	b.n	8002986 <HAL_RCC_OscConfig+0x62e>
 80028aa:	2301      	movs	r3, #1
 80028ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80028bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	461a      	mov	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fec5 	bl	8001664 <HAL_GetTick>
 80028da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fec0 	bl	8001664 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d902      	bls.n	80028f6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f000 bd7e 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002908:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x5d4>
 8002920:	4b01      	ldr	r3, [pc, #4]	@ (8002928 <HAL_RCC_OscConfig+0x5d0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e016      	b.n	8002954 <HAL_RCC_OscConfig+0x5fc>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	2302      	movs	r3, #2
 800292e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800293e:	2302      	movs	r3, #2
 8002940:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002944:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002950:	4bbf      	ldr	r3, [pc, #764]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2202      	movs	r2, #2
 8002956:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800295a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002966:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f042 0220 	orr.w	r2, r2, #32
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f002 021f 	and.w	r2, r2, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ac      	bne.n	80028e0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8113 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d07c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x74e>
 80029ac:	2301      	movs	r3, #1
 80029ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80029be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	4ba2      	ldr	r3, [pc, #648]	@ (8002c54 <HAL_RCC_OscConfig+0x8fc>)
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	461a      	mov	r2, r3
 80029d2:	2301      	movs	r3, #1
 80029d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fe45 	bl	8001664 <HAL_GetTick>
 80029da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e0:	f7fe fe40 	bl	8001664 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d902      	bls.n	80029f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	f000 bcfe 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 80029f6:	2302      	movs	r3, #2
 80029f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b7e      	ldr	r3, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a62:	2102      	movs	r1, #2
 8002a64:	6019      	str	r1, [r3, #0]
 8002a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f1a3 	rbit	r1, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a7c:	6019      	str	r1, [r3, #0]
  return result;
 8002a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d09d      	beq.n	80029e0 <HAL_RCC_OscConfig+0x688>
 8002aa4:	e08d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x86a>
 8002aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aaa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ace:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ad2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x8fc>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fdbc 	bl	8001664 <HAL_GetTick>
 8002aec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe fdb7 	bl	8001664 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f000 bc75 	b.w	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b58:	2202      	movs	r2, #2
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b80:	2102      	movs	r1, #2
 8002b82:	6019      	str	r1, [r3, #0]
 8002b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f1a3 	rbit	r1, r3
 8002b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b96:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b9a:	6019      	str	r1, [r3, #0]
  return result;
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d197      	bne.n	8002af2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 81a5 	beq.w	8002f22 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_RCC_OscConfig+0x8f8>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_RCC_OscConfig+0x900>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <HAL_RCC_OscConfig+0x900>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_RCC_OscConfig+0x900>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fd18 	bl	8001664 <HAL_GetTick>
 8002c34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e010      	b.n	8002c5c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fd13 	bl	8001664 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d908      	bls.n	8002c5c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e3d1      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	10908120 	.word	0x10908120
 8002c58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e94 <HAL_RCC_OscConfig+0xb3c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0e8      	beq.n	8002c3a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x92e>
 8002c78:	4b87      	ldr	r3, [pc, #540]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a86      	ldr	r2, [pc, #536]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e035      	b.n	8002cf2 <HAL_RCC_OscConfig+0x99a>
 8002c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x958>
 8002c96:	4b80      	ldr	r3, [pc, #512]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a7f      	ldr	r2, [pc, #508]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6213      	str	r3, [r2, #32]
 8002cae:	e020      	b.n	8002cf2 <HAL_RCC_OscConfig+0x99a>
 8002cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x982>
 8002cc0:	4b75      	ldr	r3, [pc, #468]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a74      	ldr	r2, [pc, #464]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	4b72      	ldr	r3, [pc, #456]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a71      	ldr	r2, [pc, #452]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x99a>
 8002cda:	4b6f      	ldr	r3, [pc, #444]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a6e      	ldr	r2, [pc, #440]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a6b      	ldr	r2, [pc, #428]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8081 	beq.w	8002e06 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fe fcae 	bl	8001664 <HAL_GetTick>
 8002d08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	e00b      	b.n	8002d26 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fca9 	bl	8001664 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e365      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d6c:	601a      	str	r2, [r3, #0]
  return result;
 8002d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d72:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_OscConfig+0xa3a>
 8002d8c:	4b42      	ldr	r3, [pc, #264]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	e013      	b.n	8002dba <HAL_RCC_OscConfig+0xa62>
 8002d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d96:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	4b38      	ldr	r3, [pc, #224]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dbe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	fa92 f1a2 	rbit	r1, r2
 8002dd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dd8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002ddc:	6011      	str	r1, [r2, #0]
  return result;
 8002dde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002de2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f002 021f 	and.w	r2, r2, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d084      	beq.n	8002d0e <HAL_RCC_OscConfig+0x9b6>
 8002e04:	e083      	b.n	8002f0e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc2d 	bl	8001664 <HAL_GetTick>
 8002e0a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fc28 	bl	8001664 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e2e4      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e30:	2202      	movs	r2, #2
 8002e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e6e:	601a      	str	r2, [r3, #0]
  return result;
 8002e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e74:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0xb44>
 8002e8e:	4b02      	ldr	r3, [pc, #8]	@ (8002e98 <HAL_RCC_OscConfig+0xb40>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	e017      	b.n	8002ec4 <HAL_RCC_OscConfig+0xb6c>
 8002e94:	40007000 	.word	0x40007000
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	4bb3      	ldr	r3, [pc, #716]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ec8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ecc:	2102      	movs	r1, #2
 8002ece:	6011      	str	r1, [r2, #0]
 8002ed0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ed4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	fa92 f1a2 	rbit	r1, r2
 8002ede:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ee2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002ee6:	6011      	str	r1, [r2, #0]
  return result;
 8002ee8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eec:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	fab2 f282 	clz	r2, r2
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f002 021f 	and.w	r2, r2, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d180      	bne.n	8002e10 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f0e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b9e      	ldr	r3, [pc, #632]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4a9d      	ldr	r2, [pc, #628]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 825e 	beq.w	80033f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f34:	4b96      	ldr	r3, [pc, #600]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f000 821f 	beq.w	8003380 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f040 8170 	bne.w	8003234 <HAL_RCC_OscConfig+0xedc>
 8002f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f58:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f78:	601a      	str	r2, [r3, #0]
  return result;
 8002f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f82:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fb63 	bl	8001664 <HAL_GetTick>
 8002f9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe fb5e 	bl	8001664 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e21c      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fdc:	601a      	str	r2, [r3, #0]
  return result;
 8002fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fe6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_OscConfig+0xcaa>
 8002ffc:	4b64      	ldr	r3, [pc, #400]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	e027      	b.n	8003052 <HAL_RCC_OscConfig+0xcfa>
 8003002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003006:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800300a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800300e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003014:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003022:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4b50      	ldr	r3, [pc, #320]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003056:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800305a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800305e:	6011      	str	r1, [r2, #0]
 8003060:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003064:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	fa92 f1a2 	rbit	r1, r2
 800306e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003072:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003076:	6011      	str	r1, [r2, #0]
  return result;
 8003078:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800307c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d182      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309e:	4b3c      	ldr	r3, [pc, #240]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	f023 020f 	bic.w	r2, r3, #15
 80030a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80030b8:	4b35      	ldr	r3, [pc, #212]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80030c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a19      	ldr	r1, [r3, #32]
 80030cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	430b      	orrs	r3, r1
 80030da:	492d      	ldr	r1, [pc, #180]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003100:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003104:	601a      	str	r2, [r3, #0]
  return result;
 8003106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800310e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800311a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	461a      	mov	r2, r3
 8003122:	2301      	movs	r3, #1
 8003124:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe fa9d 	bl	8001664 <HAL_GetTick>
 800312a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312e:	e009      	b.n	8003144 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fa98 	bl	8001664 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e156      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8003144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003148:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800314c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003156:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003164:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003168:	601a      	str	r2, [r3, #0]
  return result;
 800316a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800316e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003172:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0xe3c>
 8003188:	4b01      	ldr	r3, [pc, #4]	@ (8003190 <HAL_RCC_OscConfig+0xe38>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	e02a      	b.n	80031e4 <HAL_RCC_OscConfig+0xe8c>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003198:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800319c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031da:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b86      	ldr	r3, [pc, #536]	@ (80033fc <HAL_RCC_OscConfig+0x10a4>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031e8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031f6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	fa92 f1a2 	rbit	r1, r2
 8003200:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003204:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003208:	6011      	str	r1, [r2, #0]
  return result;
 800320a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800320e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	fab2 f282 	clz	r2, r2
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f042 0220 	orr.w	r2, r2, #32
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f002 021f 	and.w	r2, r2, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f43f af7f 	beq.w	8003130 <HAL_RCC_OscConfig+0xdd8>
 8003232:	e0dd      	b.n	80033f0 <HAL_RCC_OscConfig+0x1098>
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800323c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003262:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800326e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe f9f3 	bl	8001664 <HAL_GetTick>
 800327e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e009      	b.n	8003298 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe f9ee 	bl	8001664 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0ac      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
 8003298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032bc:	601a      	str	r2, [r3, #0]
  return result;
 80032be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0xf8a>
 80032dc:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_RCC_OscConfig+0x10a4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e027      	b.n	8003332 <HAL_RCC_OscConfig+0xfda>
 80032e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003302:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003328:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_RCC_OscConfig+0x10a4>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003336:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800333a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800333e:	6011      	str	r1, [r2, #0]
 8003340:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003344:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	fa92 f1a2 	rbit	r1, r2
 800334e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003352:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003356:	6011      	str	r1, [r2, #0]
  return result;
 8003358:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800335c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f002 021f 	and.w	r2, r2, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d182      	bne.n	8003284 <HAL_RCC_OscConfig+0xf2c>
 800337e:	e037      	b.n	80033f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003384:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e02e      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_OscConfig+0x10a4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800339c:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <HAL_RCC_OscConfig+0x10a4>)
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033a8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80033ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d117      	bne.n	80033ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033c0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d10b      	bne.n	80033ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80033d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b09e      	sub	sp, #120	@ 0x78
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e162      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b90      	ldr	r3, [pc, #576]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b8d      	ldr	r3, [pc, #564]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0207 	bic.w	r2, r3, #7
 800342e:	498b      	ldr	r1, [pc, #556]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b89      	ldr	r3, [pc, #548]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e14a      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b82      	ldr	r3, [pc, #520]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	497f      	ldr	r1, [pc, #508]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80dc 	beq.w	800362c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d13c      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xf6>
 800347c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003480:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xa6>
 80034a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	e00f      	b.n	80034c6 <HAL_RCC_ClockConfig+0xc6>
 80034a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80034b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c2:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034ce:	fa92 f2a2 	rbit	r2, r2
 80034d2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034d6:	fab2 f282 	clz	r2, r2
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f042 0220 	orr.w	r2, r2, #32
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	f002 021f 	and.w	r2, r2, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d17b      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0f3      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d13c      	bne.n	8003578 <HAL_RCC_ClockConfig+0x178>
 80034fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003502:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800350c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_RCC_ClockConfig+0x128>
 8003522:	4b4f      	ldr	r3, [pc, #316]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e00f      	b.n	8003548 <HAL_RCC_ClockConfig+0x148>
 8003528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353a:	643b      	str	r3, [r7, #64]	@ 0x40
 800353c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003544:	4b46      	ldr	r3, [pc, #280]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800354e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003556:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f002 021f 	and.w	r2, r2, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d13a      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b2      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
 8003578:	2302      	movs	r3, #2
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d102      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x1a0>
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	e00d      	b.n	80035bc <HAL_RCC_ClockConfig+0x1bc>
 80035a0:	2302      	movs	r3, #2
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ac:	2302      	movs	r3, #2
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	2202      	movs	r2, #2
 80035be:	61ba      	str	r2, [r7, #24]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	fa92 f2a2 	rbit	r2, r2
 80035c6:	617a      	str	r2, [r7, #20]
  return result;
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0220 	orr.w	r2, r2, #32
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e079      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	491a      	ldr	r1, [pc, #104]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7fe f832 	bl	8001664 <HAL_GetTick>
 8003600:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe f82e 	bl	8001664 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e061      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_RCC_ClockConfig+0x260>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d214      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b08      	ldr	r3, [pc, #32]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 0207 	bic.w	r2, r3, #7
 8003642:	4906      	ldr	r1, [pc, #24]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b04      	ldr	r3, [pc, #16]	@ (800365c <HAL_RCC_ClockConfig+0x25c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e040      	b.n	80036de <HAL_RCC_ClockConfig+0x2de>
 800365c:	40022000 	.word	0x40022000
 8003660:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	491a      	ldr	r1, [pc, #104]	@ (80036e8 <HAL_RCC_ClockConfig+0x2e8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4912      	ldr	r1, [pc, #72]	@ (80036e8 <HAL_RCC_ClockConfig+0x2e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036a2:	f000 f829 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4601      	mov	r1, r0
 80036a8:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <HAL_RCC_ClockConfig+0x2e8>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b0:	22f0      	movs	r2, #240	@ 0xf0
 80036b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	fa92 f2a2 	rbit	r2, r2
 80036ba:	60fa      	str	r2, [r7, #12]
  return result;
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	40d3      	lsrs	r3, r2
 80036c6:	4a09      	ldr	r2, [pc, #36]	@ (80036ec <HAL_RCC_ClockConfig+0x2ec>)
 80036c8:	5cd3      	ldrb	r3, [r2, r3]
 80036ca:	fa21 f303 	lsr.w	r3, r1, r3
 80036ce:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <HAL_RCC_ClockConfig+0x2f0>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <HAL_RCC_ClockConfig+0x2f4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd ff80 	bl	80015dc <HAL_InitTick>
  
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3778      	adds	r7, #120	@ 0x78
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	080057ec 	.word	0x080057ec
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003712:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x98>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x30>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x36>
 8003726:	e029      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x9c>)
 800372a:	613b      	str	r3, [r7, #16]
      break;
 800372c:	e029      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x98>)
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003754:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e007      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003766:	4a0b      	ldr	r2, [pc, #44]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	fbb2 f2f3 	udiv	r2, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	613b      	str	r3, [r7, #16]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x9c>)
 800377e:	613b      	str	r3, [r7, #16]
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	693b      	ldr	r3, [r7, #16]
}
 8003784:	4618      	mov	r0, r3
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40021000 	.word	0x40021000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	08005804 	.word	0x08005804
 800379c:	08005814 	.word	0x08005814

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037be:	f7ff ffef 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c2:	4601      	mov	r1, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	603a      	str	r2, [r7, #0]
  return result;
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080057fc 	.word	0x080057fc

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003802:	f7ff ffcd 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 8003806:	4601      	mov	r1, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003810:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003814:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	603a      	str	r2, [r7, #0]
  return result;
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	40d3      	lsrs	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_RCC_GetPCLK2Freq+0x40>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	080057fc 	.word	0x080057fc

08003840 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b092      	sub	sp, #72	@ 0x48
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80d4 	beq.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10e      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b4b      	ldr	r3, [pc, #300]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387a:	61d3      	str	r3, [r2, #28]
 800387c:	4b48      	ldr	r3, [pc, #288]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b45      	ldr	r3, [pc, #276]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b42      	ldr	r3, [pc, #264]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a41      	ldr	r2, [pc, #260]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7fd fedd 	bl	8001664 <HAL_GetTick>
 80038aa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7fd fed9 	bl	8001664 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b64      	cmp	r3, #100	@ 0x64
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e1d6      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038cc:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8084 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d07c      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ec:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	461a      	mov	r2, r3
 8003916:	2301      	movs	r3, #1
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800393e:	4a18      	ldr	r2, [pc, #96]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003942:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04b      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fd fe89 	bl	8001664 <HAL_GetTick>
 8003952:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fd fe85 	bl	8001664 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e180      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800396c:	2302      	movs	r3, #2
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	61fb      	str	r3, [r7, #28]
  return result;
 8003984:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d108      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800399a:	4b01      	ldr	r3, [pc, #4]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	e00d      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
 80039a8:	10908100 	.word	0x10908100
 80039ac:	2302      	movs	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	2202      	movs	r2, #2
 80039be:	613a      	str	r2, [r7, #16]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	60fa      	str	r2, [r7, #12]
  return result;
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f002 021f 	and.w	r2, r2, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0b7      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	498c      	ldr	r1, [pc, #560]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a00:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4a87      	ldr	r2, [pc, #540]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a18:	4b82      	ldr	r3, [pc, #520]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	f023 0203 	bic.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	497f      	ldr	r1, [pc, #508]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a36:	4b7b      	ldr	r3, [pc, #492]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4978      	ldr	r1, [pc, #480]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a54:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	4970      	ldr	r1, [pc, #448]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a72:	4b6c      	ldr	r3, [pc, #432]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4969      	ldr	r1, [pc, #420]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a90:	4b64      	ldr	r3, [pc, #400]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	4961      	ldr	r1, [pc, #388]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aae:	4b5d      	ldr	r3, [pc, #372]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f023 0220 	bic.w	r2, r3, #32
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	495a      	ldr	r1, [pc, #360]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003acc:	4b55      	ldr	r3, [pc, #340]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	4952      	ldr	r1, [pc, #328]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aea:	4b4e      	ldr	r3, [pc, #312]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	494b      	ldr	r1, [pc, #300]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b08:	4b46      	ldr	r3, [pc, #280]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4943      	ldr	r1, [pc, #268]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b26:	4b3f      	ldr	r3, [pc, #252]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	493c      	ldr	r1, [pc, #240]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b44:	4b37      	ldr	r3, [pc, #220]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	4934      	ldr	r1, [pc, #208]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b62:	4b30      	ldr	r3, [pc, #192]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	492d      	ldr	r1, [pc, #180]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	4925      	ldr	r1, [pc, #148]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b9e:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	491e      	ldr	r1, [pc, #120]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003bbc:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	4916      	ldr	r1, [pc, #88]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003bda:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	490f      	ldr	r1, [pc, #60]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	4907      	ldr	r1, [pc, #28]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c16:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	4913      	ldr	r1, [pc, #76]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	490b      	ldr	r1, [pc, #44]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c66:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3748      	adds	r7, #72	@ 0x48
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e049      	b.n	8003d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f841 	bl	8003d2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 faa4 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04f      	b.n	8003df8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a23      	ldr	r2, [pc, #140]	@ (8003e04 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01d      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d82:	d018      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1e      	ldr	r2, [pc, #120]	@ (8003e0c <HAL_TIM_Base_Start_IT+0xcc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_TIM_Base_Start_IT+0x76>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	@ (8003e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d115      	bne.n	8003de2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d015      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0xb4>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dce:	d011      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de0:	e008      	b.n	8003df4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40015000 	.word	0x40015000
 8003e1c:	00010007 	.word	0x00010007

08003e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01b      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0202 	mvn.w	r2, #2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9ad 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f99f 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f9b0 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d020      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01b      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0204 	mvn.w	r2, #4
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f987 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f979 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f98a 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d020      	beq.n	8003f1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0208 	mvn.w	r2, #8
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f961 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f953 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f964 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d020      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0210 	mvn.w	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f93b 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f92d 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f93e 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0201 	mvn.w	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc ff7e 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa7a 	bl	80044a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa72 	bl	80044b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8fd 	bl	80041f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0220 	mvn.w	r2, #32
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa3a 	bl	8004490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIM_ConfigClockSource+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e0b6      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x18a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	d03e      	beq.n	80040fc <HAL_TIM_ConfigClockSource+0xd8>
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004082:	f200 8087 	bhi.w	8004194 <HAL_TIM_ConfigClockSource+0x170>
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408a:	f000 8086 	beq.w	800419a <HAL_TIM_ConfigClockSource+0x176>
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004092:	d87f      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 8004094:	2b70      	cmp	r3, #112	@ 0x70
 8004096:	d01a      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0xaa>
 8004098:	2b70      	cmp	r3, #112	@ 0x70
 800409a:	d87b      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 800409c:	2b60      	cmp	r3, #96	@ 0x60
 800409e:	d050      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x11e>
 80040a0:	2b60      	cmp	r3, #96	@ 0x60
 80040a2:	d877      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040a4:	2b50      	cmp	r3, #80	@ 0x50
 80040a6:	d03c      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0xfe>
 80040a8:	2b50      	cmp	r3, #80	@ 0x50
 80040aa:	d873      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d058      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x13e>
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d86f      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040b4:	2b30      	cmp	r3, #48	@ 0x30
 80040b6:	d064      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040b8:	2b30      	cmp	r3, #48	@ 0x30
 80040ba:	d86b      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d060      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d867      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d05a      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040cc:	e062      	b.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040de:	f000 f9b7 	bl	8004450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	609a      	str	r2, [r3, #8]
      break;
 80040fa:	e04f      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	f000 f9a0 	bl	8004450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800411e:	609a      	str	r2, [r3, #8]
      break;
 8004120:	e03c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	461a      	mov	r2, r3
 8004130:	f000 f914 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2150      	movs	r1, #80	@ 0x50
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f96d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004140:	e02c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414e:	461a      	mov	r2, r3
 8004150:	f000 f933 	bl	80043ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2160      	movs	r1, #96	@ 0x60
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f95d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004160:	e01c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	461a      	mov	r2, r3
 8004170:	f000 f8f4 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2140      	movs	r1, #64	@ 0x40
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f94d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004180:	e00c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f000 f944 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004192:	e003      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      break;
 8004198:	e000      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800419a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a48      	ldr	r2, [pc, #288]	@ (800433c <TIM_Base_SetConfig+0x134>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a45      	ldr	r2, [pc, #276]	@ (8004340 <TIM_Base_SetConfig+0x138>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a44      	ldr	r2, [pc, #272]	@ (8004344 <TIM_Base_SetConfig+0x13c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a43      	ldr	r2, [pc, #268]	@ (8004348 <TIM_Base_SetConfig+0x140>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a42      	ldr	r2, [pc, #264]	@ (800434c <TIM_Base_SetConfig+0x144>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a37      	ldr	r2, [pc, #220]	@ (800433c <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004268:	d01b      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a34      	ldr	r2, [pc, #208]	@ (8004340 <TIM_Base_SetConfig+0x138>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d017      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a33      	ldr	r2, [pc, #204]	@ (8004344 <TIM_Base_SetConfig+0x13c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a32      	ldr	r2, [pc, #200]	@ (8004348 <TIM_Base_SetConfig+0x140>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a32      	ldr	r2, [pc, #200]	@ (8004350 <TIM_Base_SetConfig+0x148>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a31      	ldr	r2, [pc, #196]	@ (8004354 <TIM_Base_SetConfig+0x14c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a30      	ldr	r2, [pc, #192]	@ (8004358 <TIM_Base_SetConfig+0x150>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <TIM_Base_SetConfig+0x144>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a18      	ldr	r2, [pc, #96]	@ (800433c <TIM_Base_SetConfig+0x134>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <TIM_Base_SetConfig+0x100>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <TIM_Base_SetConfig+0x140>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00f      	beq.n	8004308 <TIM_Base_SetConfig+0x100>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <TIM_Base_SetConfig+0x148>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00b      	beq.n	8004308 <TIM_Base_SetConfig+0x100>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <TIM_Base_SetConfig+0x14c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <TIM_Base_SetConfig+0x100>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a17      	ldr	r2, [pc, #92]	@ (8004358 <TIM_Base_SetConfig+0x150>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_Base_SetConfig+0x100>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <TIM_Base_SetConfig+0x144>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	611a      	str	r2, [r3, #16]
  }
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40013400 	.word	0x40013400
 800434c:	40015000 	.word	0x40015000
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800

0800435c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 030a 	bic.w	r3, r3, #10
 8004398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f023 0210 	bic.w	r2, r3, #16
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	031b      	lsls	r3, r3, #12
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	f043 0307 	orr.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	431a      	orrs	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e040      	b.n	8004560 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fed0 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	@ 0x24
 80044f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa86 	bl	8004a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8af 	bl	800467c <UART_SetConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e01b      	b.n	8004560 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fb05 	bl	8004b68 <UART_CheckIdleState>
 800455e:	4603      	mov	r3, r0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	@ 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457c:	2b20      	cmp	r3, #32
 800457e:	d177      	bne.n	8004670 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Transmit+0x24>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e070      	b.n	8004672 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2221      	movs	r2, #33	@ 0x21
 800459c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fd f861 	bl	8001664 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045bc:	d108      	bne.n	80045d0 <HAL_UART_Transmit+0x68>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e003      	b.n	80045d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045d8:	e02f      	b.n	800463a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2180      	movs	r1, #128	@ 0x80
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fb67 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e03b      	b.n	8004672 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	b292      	uxth	r2, r2
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	3302      	adds	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e007      	b.n	8004628 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3301      	adds	r3, #1
 8004626:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1c9      	bne.n	80045da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2140      	movs	r1, #64	@ 0x40
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fb31 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e005      	b.n	8004672 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b92      	ldr	r3, [pc, #584]	@ (80048f0 <UART_SetConfig+0x274>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	6979      	ldr	r1, [r7, #20]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a80      	ldr	r2, [pc, #512]	@ (80048f4 <UART_SetConfig+0x278>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d120      	bne.n	800473a <UART_SetConfig+0xbe>
 80046f8:	4b7f      	ldr	r3, [pc, #508]	@ (80048f8 <UART_SetConfig+0x27c>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b03      	cmp	r3, #3
 8004702:	d817      	bhi.n	8004734 <UART_SetConfig+0xb8>
 8004704:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <UART_SetConfig+0x90>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	0800471d 	.word	0x0800471d
 8004710:	08004729 	.word	0x08004729
 8004714:	0800472f 	.word	0x0800472f
 8004718:	08004723 	.word	0x08004723
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e0b5      	b.n	800488e <UART_SetConfig+0x212>
 8004722:	2302      	movs	r3, #2
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e0b2      	b.n	800488e <UART_SetConfig+0x212>
 8004728:	2304      	movs	r3, #4
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e0af      	b.n	800488e <UART_SetConfig+0x212>
 800472e:	2308      	movs	r3, #8
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e0ac      	b.n	800488e <UART_SetConfig+0x212>
 8004734:	2310      	movs	r3, #16
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e0a9      	b.n	800488e <UART_SetConfig+0x212>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6f      	ldr	r2, [pc, #444]	@ (80048fc <UART_SetConfig+0x280>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d124      	bne.n	800478e <UART_SetConfig+0x112>
 8004744:	4b6c      	ldr	r3, [pc, #432]	@ (80048f8 <UART_SetConfig+0x27c>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800474c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004750:	d011      	beq.n	8004776 <UART_SetConfig+0xfa>
 8004752:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004756:	d817      	bhi.n	8004788 <UART_SetConfig+0x10c>
 8004758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800475c:	d011      	beq.n	8004782 <UART_SetConfig+0x106>
 800475e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004762:	d811      	bhi.n	8004788 <UART_SetConfig+0x10c>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <UART_SetConfig+0xf4>
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d006      	beq.n	800477c <UART_SetConfig+0x100>
 800476e:	e00b      	b.n	8004788 <UART_SetConfig+0x10c>
 8004770:	2300      	movs	r3, #0
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e08b      	b.n	800488e <UART_SetConfig+0x212>
 8004776:	2302      	movs	r3, #2
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e088      	b.n	800488e <UART_SetConfig+0x212>
 800477c:	2304      	movs	r3, #4
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e085      	b.n	800488e <UART_SetConfig+0x212>
 8004782:	2308      	movs	r3, #8
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e082      	b.n	800488e <UART_SetConfig+0x212>
 8004788:	2310      	movs	r3, #16
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e07f      	b.n	800488e <UART_SetConfig+0x212>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5b      	ldr	r2, [pc, #364]	@ (8004900 <UART_SetConfig+0x284>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d124      	bne.n	80047e2 <UART_SetConfig+0x166>
 8004798:	4b57      	ldr	r3, [pc, #348]	@ (80048f8 <UART_SetConfig+0x27c>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80047a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047a4:	d011      	beq.n	80047ca <UART_SetConfig+0x14e>
 80047a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047aa:	d817      	bhi.n	80047dc <UART_SetConfig+0x160>
 80047ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047b0:	d011      	beq.n	80047d6 <UART_SetConfig+0x15a>
 80047b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047b6:	d811      	bhi.n	80047dc <UART_SetConfig+0x160>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <UART_SetConfig+0x148>
 80047bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047c0:	d006      	beq.n	80047d0 <UART_SetConfig+0x154>
 80047c2:	e00b      	b.n	80047dc <UART_SetConfig+0x160>
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e061      	b.n	800488e <UART_SetConfig+0x212>
 80047ca:	2302      	movs	r3, #2
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e05e      	b.n	800488e <UART_SetConfig+0x212>
 80047d0:	2304      	movs	r3, #4
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e05b      	b.n	800488e <UART_SetConfig+0x212>
 80047d6:	2308      	movs	r3, #8
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e058      	b.n	800488e <UART_SetConfig+0x212>
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e055      	b.n	800488e <UART_SetConfig+0x212>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a47      	ldr	r2, [pc, #284]	@ (8004904 <UART_SetConfig+0x288>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d124      	bne.n	8004836 <UART_SetConfig+0x1ba>
 80047ec:	4b42      	ldr	r3, [pc, #264]	@ (80048f8 <UART_SetConfig+0x27c>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047f8:	d011      	beq.n	800481e <UART_SetConfig+0x1a2>
 80047fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047fe:	d817      	bhi.n	8004830 <UART_SetConfig+0x1b4>
 8004800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004804:	d011      	beq.n	800482a <UART_SetConfig+0x1ae>
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800480a:	d811      	bhi.n	8004830 <UART_SetConfig+0x1b4>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <UART_SetConfig+0x19c>
 8004810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004814:	d006      	beq.n	8004824 <UART_SetConfig+0x1a8>
 8004816:	e00b      	b.n	8004830 <UART_SetConfig+0x1b4>
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e037      	b.n	800488e <UART_SetConfig+0x212>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e034      	b.n	800488e <UART_SetConfig+0x212>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e031      	b.n	800488e <UART_SetConfig+0x212>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e02e      	b.n	800488e <UART_SetConfig+0x212>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e02b      	b.n	800488e <UART_SetConfig+0x212>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a33      	ldr	r2, [pc, #204]	@ (8004908 <UART_SetConfig+0x28c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d124      	bne.n	800488a <UART_SetConfig+0x20e>
 8004840:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <UART_SetConfig+0x27c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004848:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800484c:	d011      	beq.n	8004872 <UART_SetConfig+0x1f6>
 800484e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004852:	d817      	bhi.n	8004884 <UART_SetConfig+0x208>
 8004854:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004858:	d011      	beq.n	800487e <UART_SetConfig+0x202>
 800485a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800485e:	d811      	bhi.n	8004884 <UART_SetConfig+0x208>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <UART_SetConfig+0x1f0>
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004868:	d006      	beq.n	8004878 <UART_SetConfig+0x1fc>
 800486a:	e00b      	b.n	8004884 <UART_SetConfig+0x208>
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e00d      	b.n	800488e <UART_SetConfig+0x212>
 8004872:	2302      	movs	r3, #2
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e00a      	b.n	800488e <UART_SetConfig+0x212>
 8004878:	2304      	movs	r3, #4
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e007      	b.n	800488e <UART_SetConfig+0x212>
 800487e:	2308      	movs	r3, #8
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e004      	b.n	800488e <UART_SetConfig+0x212>
 8004884:	2310      	movs	r3, #16
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e001      	b.n	800488e <UART_SetConfig+0x212>
 800488a:	2310      	movs	r3, #16
 800488c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d16b      	bne.n	8004970 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004898:	7ffb      	ldrb	r3, [r7, #31]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d838      	bhi.n	8004910 <UART_SetConfig+0x294>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0x228>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	08004911 	.word	0x08004911
 80048b4:	080048df 	.word	0x080048df
 80048b8:	08004911 	.word	0x08004911
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004911 	.word	0x08004911
 80048c4:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe ff76 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e024      	b.n	800491a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe ff94 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 80048d4:	61b8      	str	r0, [r7, #24]
        break;
 80048d6:	e020      	b.n	800491a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <UART_SetConfig+0x290>)
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e01d      	b.n	800491a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe ff0b 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80048e2:	61b8      	str	r0, [r7, #24]
        break;
 80048e4:	e019      	b.n	800491a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ea:	61bb      	str	r3, [r7, #24]
        break;
 80048ec:	e015      	b.n	800491a <UART_SetConfig+0x29e>
 80048ee:	bf00      	nop
 80048f0:	efff69f3 	.word	0xefff69f3
 80048f4:	40013800 	.word	0x40013800
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	40004c00 	.word	0x40004c00
 8004908:	40005000 	.word	0x40005000
 800490c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	77bb      	strb	r3, [r7, #30]
        break;
 8004918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d073      	beq.n	8004a08 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	005a      	lsls	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	441a      	add	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	d916      	bls.n	800496a <UART_SetConfig+0x2ee>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004942:	d212      	bcs.n	800496a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f023 030f 	bic.w	r3, r3, #15
 800494c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	b29b      	uxth	r3, r3
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	b29a      	uxth	r2, r3
 800495a:	89fb      	ldrh	r3, [r7, #14]
 800495c:	4313      	orrs	r3, r2
 800495e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	89fa      	ldrh	r2, [r7, #14]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e04e      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	77bb      	strb	r3, [r7, #30]
 800496e:	e04b      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	2b08      	cmp	r3, #8
 8004974:	d827      	bhi.n	80049c6 <UART_SetConfig+0x34a>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x300>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b7 	.word	0x080049b7
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe ff0a 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80049a4:	61b8      	str	r0, [r7, #24]
        break;
 80049a6:	e013      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fe ff28 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 80049ac:	61b8      	str	r0, [r7, #24]
        break;
 80049ae:	e00f      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <UART_SetConfig+0x3a4>)
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e00c      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fe9f 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80049ba:	61b8      	str	r0, [r7, #24]
        break;
 80049bc:	e008      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c2:	61bb      	str	r3, [r7, #24]
        break;
 80049c4:	e004      	b.n	80049d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77bb      	strb	r3, [r7, #30]
        break;
 80049ce:	bf00      	nop
    }

    if (pclk != 0U)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	085a      	lsrs	r2, r3, #1
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d909      	bls.n	8004a04 <UART_SetConfig+0x388>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f6:	d205      	bcs.n	8004a04 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e001      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	007a1200 	.word	0x007a1200

08004a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b22:	d10a      	bne.n	8004b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b098      	sub	sp, #96	@ 0x60
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b78:	f7fc fd74 	bl	8001664 <HAL_GetTick>
 8004b7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d12e      	bne.n	8004bea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f88c 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d021      	beq.n	8004bea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e062      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d149      	bne.n	8004c8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f856 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03c      	beq.n	8004c8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c64:	61fa      	str	r2, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e011      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3758      	adds	r7, #88	@ 0x58
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	e04f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d04b      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fc fcc7 	bl	8001664 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e04e      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d037      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b80      	cmp	r3, #128	@ 0x80
 8004cfe:	d034      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d031      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d110      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f838 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2208      	movs	r2, #8
 8004d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e029      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d44:	d111      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f81e 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e00f      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0a0      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b095      	sub	sp, #84	@ 0x54
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d118      	bne.n	8004e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e4e:	bf00      	nop
 8004e50:	3754      	adds	r7, #84	@ 0x54
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <siprintf>:
 8004e5c:	b40e      	push	{r1, r2, r3}
 8004e5e:	b500      	push	{lr}
 8004e60:	b09c      	sub	sp, #112	@ 0x70
 8004e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e64:	9002      	str	r0, [sp, #8]
 8004e66:	9006      	str	r0, [sp, #24]
 8004e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e6c:	4809      	ldr	r0, [pc, #36]	@ (8004e94 <siprintf+0x38>)
 8004e6e:	9107      	str	r1, [sp, #28]
 8004e70:	9104      	str	r1, [sp, #16]
 8004e72:	4909      	ldr	r1, [pc, #36]	@ (8004e98 <siprintf+0x3c>)
 8004e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e78:	9105      	str	r1, [sp, #20]
 8004e7a:	6800      	ldr	r0, [r0, #0]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	a902      	add	r1, sp, #8
 8004e80:	f000 f994 	bl	80051ac <_svfiprintf_r>
 8004e84:	9b02      	ldr	r3, [sp, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	b01c      	add	sp, #112	@ 0x70
 8004e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e90:	b003      	add	sp, #12
 8004e92:	4770      	bx	lr
 8004e94:	2000000c 	.word	0x2000000c
 8004e98:	ffff0208 	.word	0xffff0208

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <__errno>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	@ (8004eb4 <__errno+0x8>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4d0d      	ldr	r5, [pc, #52]	@ (8004ef0 <__libc_init_array+0x38>)
 8004ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef4 <__libc_init_array+0x3c>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ef8 <__libc_init_array+0x40>)
 8004eca:	4c0c      	ldr	r4, [pc, #48]	@ (8004efc <__libc_init_array+0x44>)
 8004ecc:	f000 fc66 	bl	800579c <_init>
 8004ed0:	1b64      	subs	r4, r4, r5
 8004ed2:	10a4      	asrs	r4, r4, #2
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	08005860 	.word	0x08005860
 8004ef4:	08005860 	.word	0x08005860
 8004ef8:	08005860 	.word	0x08005860
 8004efc:	08005864 	.word	0x08005864

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <_free_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4605      	mov	r5, r0
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d041      	beq.n	8004f90 <_free_r+0x8c>
 8004f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f10:	1f0c      	subs	r4, r1, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfb8      	it	lt
 8004f16:	18e4      	addlt	r4, r4, r3
 8004f18:	f000 f8e0 	bl	80050dc <__malloc_lock>
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <_free_r+0x90>)
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	b933      	cbnz	r3, 8004f30 <_free_r+0x2c>
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	6014      	str	r4, [r2, #0]
 8004f26:	4628      	mov	r0, r5
 8004f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f2c:	f000 b8dc 	b.w	80050e8 <__malloc_unlock>
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d908      	bls.n	8004f46 <_free_r+0x42>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	1821      	adds	r1, r4, r0
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf01      	itttt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	1809      	addeq	r1, r1, r0
 8004f42:	6021      	streq	r1, [r4, #0]
 8004f44:	e7ed      	b.n	8004f22 <_free_r+0x1e>
 8004f46:	461a      	mov	r2, r3
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b10b      	cbz	r3, 8004f50 <_free_r+0x4c>
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d9fa      	bls.n	8004f46 <_free_r+0x42>
 8004f50:	6811      	ldr	r1, [r2, #0]
 8004f52:	1850      	adds	r0, r2, r1
 8004f54:	42a0      	cmp	r0, r4
 8004f56:	d10b      	bne.n	8004f70 <_free_r+0x6c>
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	4401      	add	r1, r0
 8004f5c:	1850      	adds	r0, r2, r1
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	d1e0      	bne.n	8004f26 <_free_r+0x22>
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	6053      	str	r3, [r2, #4]
 8004f6a:	4408      	add	r0, r1
 8004f6c:	6010      	str	r0, [r2, #0]
 8004f6e:	e7da      	b.n	8004f26 <_free_r+0x22>
 8004f70:	d902      	bls.n	8004f78 <_free_r+0x74>
 8004f72:	230c      	movs	r3, #12
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	e7d6      	b.n	8004f26 <_free_r+0x22>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	1821      	adds	r1, r4, r0
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	bf04      	itt	eq
 8004f80:	6819      	ldreq	r1, [r3, #0]
 8004f82:	685b      	ldreq	r3, [r3, #4]
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	bf04      	itt	eq
 8004f88:	1809      	addeq	r1, r1, r0
 8004f8a:	6021      	streq	r1, [r4, #0]
 8004f8c:	6054      	str	r4, [r2, #4]
 8004f8e:	e7ca      	b.n	8004f26 <_free_r+0x22>
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	bf00      	nop
 8004f94:	20000360 	.word	0x20000360

08004f98 <sbrk_aligned>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8004fd8 <sbrk_aligned+0x40>)
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	6831      	ldr	r1, [r6, #0]
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	b911      	cbnz	r1, 8004faa <sbrk_aligned+0x12>
 8004fa4:	f000 fba6 	bl	80056f4 <_sbrk_r>
 8004fa8:	6030      	str	r0, [r6, #0]
 8004faa:	4621      	mov	r1, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f000 fba1 	bl	80056f4 <_sbrk_r>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	d103      	bne.n	8004fbe <sbrk_aligned+0x26>
 8004fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8004fba:	4620      	mov	r0, r4
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	1cc4      	adds	r4, r0, #3
 8004fc0:	f024 0403 	bic.w	r4, r4, #3
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d0f8      	beq.n	8004fba <sbrk_aligned+0x22>
 8004fc8:	1a21      	subs	r1, r4, r0
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 fb92 	bl	80056f4 <_sbrk_r>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d1f2      	bne.n	8004fba <sbrk_aligned+0x22>
 8004fd4:	e7ef      	b.n	8004fb6 <sbrk_aligned+0x1e>
 8004fd6:	bf00      	nop
 8004fd8:	2000035c 	.word	0x2000035c

08004fdc <_malloc_r>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	1ccd      	adds	r5, r1, #3
 8004fe2:	f025 0503 	bic.w	r5, r5, #3
 8004fe6:	3508      	adds	r5, #8
 8004fe8:	2d0c      	cmp	r5, #12
 8004fea:	bf38      	it	cc
 8004fec:	250c      	movcc	r5, #12
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	db01      	blt.n	8004ff8 <_malloc_r+0x1c>
 8004ff4:	42a9      	cmp	r1, r5
 8004ff6:	d904      	bls.n	8005002 <_malloc_r+0x26>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	6033      	str	r3, [r6, #0]
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050d8 <_malloc_r+0xfc>
 8005006:	f000 f869 	bl	80050dc <__malloc_lock>
 800500a:	f8d8 3000 	ldr.w	r3, [r8]
 800500e:	461c      	mov	r4, r3
 8005010:	bb44      	cbnz	r4, 8005064 <_malloc_r+0x88>
 8005012:	4629      	mov	r1, r5
 8005014:	4630      	mov	r0, r6
 8005016:	f7ff ffbf 	bl	8004f98 <sbrk_aligned>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	4604      	mov	r4, r0
 800501e:	d158      	bne.n	80050d2 <_malloc_r+0xf6>
 8005020:	f8d8 4000 	ldr.w	r4, [r8]
 8005024:	4627      	mov	r7, r4
 8005026:	2f00      	cmp	r7, #0
 8005028:	d143      	bne.n	80050b2 <_malloc_r+0xd6>
 800502a:	2c00      	cmp	r4, #0
 800502c:	d04b      	beq.n	80050c6 <_malloc_r+0xea>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	4639      	mov	r1, r7
 8005032:	4630      	mov	r0, r6
 8005034:	eb04 0903 	add.w	r9, r4, r3
 8005038:	f000 fb5c 	bl	80056f4 <_sbrk_r>
 800503c:	4581      	cmp	r9, r0
 800503e:	d142      	bne.n	80050c6 <_malloc_r+0xea>
 8005040:	6821      	ldr	r1, [r4, #0]
 8005042:	1a6d      	subs	r5, r5, r1
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f7ff ffa6 	bl	8004f98 <sbrk_aligned>
 800504c:	3001      	adds	r0, #1
 800504e:	d03a      	beq.n	80050c6 <_malloc_r+0xea>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	442b      	add	r3, r5
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	f8d8 3000 	ldr.w	r3, [r8]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	bb62      	cbnz	r2, 80050b8 <_malloc_r+0xdc>
 800505e:	f8c8 7000 	str.w	r7, [r8]
 8005062:	e00f      	b.n	8005084 <_malloc_r+0xa8>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	1b52      	subs	r2, r2, r5
 8005068:	d420      	bmi.n	80050ac <_malloc_r+0xd0>
 800506a:	2a0b      	cmp	r2, #11
 800506c:	d917      	bls.n	800509e <_malloc_r+0xc2>
 800506e:	1961      	adds	r1, r4, r5
 8005070:	42a3      	cmp	r3, r4
 8005072:	6025      	str	r5, [r4, #0]
 8005074:	bf18      	it	ne
 8005076:	6059      	strne	r1, [r3, #4]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	bf08      	it	eq
 800507c:	f8c8 1000 	streq.w	r1, [r8]
 8005080:	5162      	str	r2, [r4, r5]
 8005082:	604b      	str	r3, [r1, #4]
 8005084:	4630      	mov	r0, r6
 8005086:	f000 f82f 	bl	80050e8 <__malloc_unlock>
 800508a:	f104 000b 	add.w	r0, r4, #11
 800508e:	1d23      	adds	r3, r4, #4
 8005090:	f020 0007 	bic.w	r0, r0, #7
 8005094:	1ac2      	subs	r2, r0, r3
 8005096:	bf1c      	itt	ne
 8005098:	1a1b      	subne	r3, r3, r0
 800509a:	50a3      	strne	r3, [r4, r2]
 800509c:	e7af      	b.n	8004ffe <_malloc_r+0x22>
 800509e:	6862      	ldr	r2, [r4, #4]
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	bf0c      	ite	eq
 80050a4:	f8c8 2000 	streq.w	r2, [r8]
 80050a8:	605a      	strne	r2, [r3, #4]
 80050aa:	e7eb      	b.n	8005084 <_malloc_r+0xa8>
 80050ac:	4623      	mov	r3, r4
 80050ae:	6864      	ldr	r4, [r4, #4]
 80050b0:	e7ae      	b.n	8005010 <_malloc_r+0x34>
 80050b2:	463c      	mov	r4, r7
 80050b4:	687f      	ldr	r7, [r7, #4]
 80050b6:	e7b6      	b.n	8005026 <_malloc_r+0x4a>
 80050b8:	461a      	mov	r2, r3
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d1fb      	bne.n	80050b8 <_malloc_r+0xdc>
 80050c0:	2300      	movs	r3, #0
 80050c2:	6053      	str	r3, [r2, #4]
 80050c4:	e7de      	b.n	8005084 <_malloc_r+0xa8>
 80050c6:	230c      	movs	r3, #12
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	4630      	mov	r0, r6
 80050cc:	f000 f80c 	bl	80050e8 <__malloc_unlock>
 80050d0:	e794      	b.n	8004ffc <_malloc_r+0x20>
 80050d2:	6005      	str	r5, [r0, #0]
 80050d4:	e7d6      	b.n	8005084 <_malloc_r+0xa8>
 80050d6:	bf00      	nop
 80050d8:	20000360 	.word	0x20000360

080050dc <__malloc_lock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_lock+0x8>)
 80050de:	f7ff bf0f 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000358 	.word	0x20000358

080050e8 <__malloc_unlock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	@ (80050f0 <__malloc_unlock+0x8>)
 80050ea:	f7ff bf0a 	b.w	8004f02 <__retarget_lock_release_recursive>
 80050ee:	bf00      	nop
 80050f0:	20000358 	.word	0x20000358

080050f4 <__ssputs_r>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	688e      	ldr	r6, [r1, #8]
 80050fa:	461f      	mov	r7, r3
 80050fc:	42be      	cmp	r6, r7
 80050fe:	680b      	ldr	r3, [r1, #0]
 8005100:	4682      	mov	sl, r0
 8005102:	460c      	mov	r4, r1
 8005104:	4690      	mov	r8, r2
 8005106:	d82d      	bhi.n	8005164 <__ssputs_r+0x70>
 8005108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800510c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005110:	d026      	beq.n	8005160 <__ssputs_r+0x6c>
 8005112:	6965      	ldr	r5, [r4, #20]
 8005114:	6909      	ldr	r1, [r1, #16]
 8005116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800511a:	eba3 0901 	sub.w	r9, r3, r1
 800511e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005122:	1c7b      	adds	r3, r7, #1
 8005124:	444b      	add	r3, r9
 8005126:	106d      	asrs	r5, r5, #1
 8005128:	429d      	cmp	r5, r3
 800512a:	bf38      	it	cc
 800512c:	461d      	movcc	r5, r3
 800512e:	0553      	lsls	r3, r2, #21
 8005130:	d527      	bpl.n	8005182 <__ssputs_r+0x8e>
 8005132:	4629      	mov	r1, r5
 8005134:	f7ff ff52 	bl	8004fdc <_malloc_r>
 8005138:	4606      	mov	r6, r0
 800513a:	b360      	cbz	r0, 8005196 <__ssputs_r+0xa2>
 800513c:	6921      	ldr	r1, [r4, #16]
 800513e:	464a      	mov	r2, r9
 8005140:	f000 fae8 	bl	8005714 <memcpy>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	6126      	str	r6, [r4, #16]
 8005152:	6165      	str	r5, [r4, #20]
 8005154:	444e      	add	r6, r9
 8005156:	eba5 0509 	sub.w	r5, r5, r9
 800515a:	6026      	str	r6, [r4, #0]
 800515c:	60a5      	str	r5, [r4, #8]
 800515e:	463e      	mov	r6, r7
 8005160:	42be      	cmp	r6, r7
 8005162:	d900      	bls.n	8005166 <__ssputs_r+0x72>
 8005164:	463e      	mov	r6, r7
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	4632      	mov	r2, r6
 800516a:	4641      	mov	r1, r8
 800516c:	f000 faa8 	bl	80056c0 <memmove>
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	1b9b      	subs	r3, r3, r6
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	4433      	add	r3, r6
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	2000      	movs	r0, #0
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	462a      	mov	r2, r5
 8005184:	f000 fad4 	bl	8005730 <_realloc_r>
 8005188:	4606      	mov	r6, r0
 800518a:	2800      	cmp	r0, #0
 800518c:	d1e0      	bne.n	8005150 <__ssputs_r+0x5c>
 800518e:	6921      	ldr	r1, [r4, #16]
 8005190:	4650      	mov	r0, sl
 8005192:	f7ff feb7 	bl	8004f04 <_free_r>
 8005196:	230c      	movs	r3, #12
 8005198:	f8ca 3000 	str.w	r3, [sl]
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e7e9      	b.n	800517e <__ssputs_r+0x8a>
	...

080051ac <_svfiprintf_r>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	4698      	mov	r8, r3
 80051b2:	898b      	ldrh	r3, [r1, #12]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	b09d      	sub	sp, #116	@ 0x74
 80051b8:	4607      	mov	r7, r0
 80051ba:	460d      	mov	r5, r1
 80051bc:	4614      	mov	r4, r2
 80051be:	d510      	bpl.n	80051e2 <_svfiprintf_r+0x36>
 80051c0:	690b      	ldr	r3, [r1, #16]
 80051c2:	b973      	cbnz	r3, 80051e2 <_svfiprintf_r+0x36>
 80051c4:	2140      	movs	r1, #64	@ 0x40
 80051c6:	f7ff ff09 	bl	8004fdc <_malloc_r>
 80051ca:	6028      	str	r0, [r5, #0]
 80051cc:	6128      	str	r0, [r5, #16]
 80051ce:	b930      	cbnz	r0, 80051de <_svfiprintf_r+0x32>
 80051d0:	230c      	movs	r3, #12
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	b01d      	add	sp, #116	@ 0x74
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	2340      	movs	r3, #64	@ 0x40
 80051e0:	616b      	str	r3, [r5, #20]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051e6:	2320      	movs	r3, #32
 80051e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f0:	2330      	movs	r3, #48	@ 0x30
 80051f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005390 <_svfiprintf_r+0x1e4>
 80051f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051fa:	f04f 0901 	mov.w	r9, #1
 80051fe:	4623      	mov	r3, r4
 8005200:	469a      	mov	sl, r3
 8005202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005206:	b10a      	cbz	r2, 800520c <_svfiprintf_r+0x60>
 8005208:	2a25      	cmp	r2, #37	@ 0x25
 800520a:	d1f9      	bne.n	8005200 <_svfiprintf_r+0x54>
 800520c:	ebba 0b04 	subs.w	fp, sl, r4
 8005210:	d00b      	beq.n	800522a <_svfiprintf_r+0x7e>
 8005212:	465b      	mov	r3, fp
 8005214:	4622      	mov	r2, r4
 8005216:	4629      	mov	r1, r5
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ff6b 	bl	80050f4 <__ssputs_r>
 800521e:	3001      	adds	r0, #1
 8005220:	f000 80a7 	beq.w	8005372 <_svfiprintf_r+0x1c6>
 8005224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005226:	445a      	add	r2, fp
 8005228:	9209      	str	r2, [sp, #36]	@ 0x24
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 809f 	beq.w	8005372 <_svfiprintf_r+0x1c6>
 8005234:	2300      	movs	r3, #0
 8005236:	f04f 32ff 	mov.w	r2, #4294967295
 800523a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800523e:	f10a 0a01 	add.w	sl, sl, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	9307      	str	r3, [sp, #28]
 8005246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800524a:	931a      	str	r3, [sp, #104]	@ 0x68
 800524c:	4654      	mov	r4, sl
 800524e:	2205      	movs	r2, #5
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	484e      	ldr	r0, [pc, #312]	@ (8005390 <_svfiprintf_r+0x1e4>)
 8005256:	f7fa ffcb 	bl	80001f0 <memchr>
 800525a:	9a04      	ldr	r2, [sp, #16]
 800525c:	b9d8      	cbnz	r0, 8005296 <_svfiprintf_r+0xea>
 800525e:	06d0      	lsls	r0, r2, #27
 8005260:	bf44      	itt	mi
 8005262:	2320      	movmi	r3, #32
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005268:	0711      	lsls	r1, r2, #28
 800526a:	bf44      	itt	mi
 800526c:	232b      	movmi	r3, #43	@ 0x2b
 800526e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005272:	f89a 3000 	ldrb.w	r3, [sl]
 8005276:	2b2a      	cmp	r3, #42	@ 0x2a
 8005278:	d015      	beq.n	80052a6 <_svfiprintf_r+0xfa>
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	4654      	mov	r4, sl
 800527e:	2000      	movs	r0, #0
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4621      	mov	r1, r4
 8005286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528a:	3b30      	subs	r3, #48	@ 0x30
 800528c:	2b09      	cmp	r3, #9
 800528e:	d94b      	bls.n	8005328 <_svfiprintf_r+0x17c>
 8005290:	b1b0      	cbz	r0, 80052c0 <_svfiprintf_r+0x114>
 8005292:	9207      	str	r2, [sp, #28]
 8005294:	e014      	b.n	80052c0 <_svfiprintf_r+0x114>
 8005296:	eba0 0308 	sub.w	r3, r0, r8
 800529a:	fa09 f303 	lsl.w	r3, r9, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	46a2      	mov	sl, r4
 80052a4:	e7d2      	b.n	800524c <_svfiprintf_r+0xa0>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfbb      	ittet	lt
 80052b2:	425b      	neglt	r3, r3
 80052b4:	f042 0202 	orrlt.w	r2, r2, #2
 80052b8:	9307      	strge	r3, [sp, #28]
 80052ba:	9307      	strlt	r3, [sp, #28]
 80052bc:	bfb8      	it	lt
 80052be:	9204      	strlt	r2, [sp, #16]
 80052c0:	7823      	ldrb	r3, [r4, #0]
 80052c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80052c4:	d10a      	bne.n	80052dc <_svfiprintf_r+0x130>
 80052c6:	7863      	ldrb	r3, [r4, #1]
 80052c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ca:	d132      	bne.n	8005332 <_svfiprintf_r+0x186>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052d8:	3402      	adds	r4, #2
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053a0 <_svfiprintf_r+0x1f4>
 80052e0:	7821      	ldrb	r1, [r4, #0]
 80052e2:	2203      	movs	r2, #3
 80052e4:	4650      	mov	r0, sl
 80052e6:	f7fa ff83 	bl	80001f0 <memchr>
 80052ea:	b138      	cbz	r0, 80052fc <_svfiprintf_r+0x150>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	eba0 000a 	sub.w	r0, r0, sl
 80052f2:	2240      	movs	r2, #64	@ 0x40
 80052f4:	4082      	lsls	r2, r0
 80052f6:	4313      	orrs	r3, r2
 80052f8:	3401      	adds	r4, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005300:	4824      	ldr	r0, [pc, #144]	@ (8005394 <_svfiprintf_r+0x1e8>)
 8005302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005306:	2206      	movs	r2, #6
 8005308:	f7fa ff72 	bl	80001f0 <memchr>
 800530c:	2800      	cmp	r0, #0
 800530e:	d036      	beq.n	800537e <_svfiprintf_r+0x1d2>
 8005310:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <_svfiprintf_r+0x1ec>)
 8005312:	bb1b      	cbnz	r3, 800535c <_svfiprintf_r+0x1b0>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	3307      	adds	r3, #7
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	3308      	adds	r3, #8
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005322:	4433      	add	r3, r6
 8005324:	9309      	str	r3, [sp, #36]	@ 0x24
 8005326:	e76a      	b.n	80051fe <_svfiprintf_r+0x52>
 8005328:	fb0c 3202 	mla	r2, ip, r2, r3
 800532c:	460c      	mov	r4, r1
 800532e:	2001      	movs	r0, #1
 8005330:	e7a8      	b.n	8005284 <_svfiprintf_r+0xd8>
 8005332:	2300      	movs	r3, #0
 8005334:	3401      	adds	r4, #1
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0c0a 	mov.w	ip, #10
 800533e:	4620      	mov	r0, r4
 8005340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005344:	3a30      	subs	r2, #48	@ 0x30
 8005346:	2a09      	cmp	r2, #9
 8005348:	d903      	bls.n	8005352 <_svfiprintf_r+0x1a6>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0c6      	beq.n	80052dc <_svfiprintf_r+0x130>
 800534e:	9105      	str	r1, [sp, #20]
 8005350:	e7c4      	b.n	80052dc <_svfiprintf_r+0x130>
 8005352:	fb0c 2101 	mla	r1, ip, r1, r2
 8005356:	4604      	mov	r4, r0
 8005358:	2301      	movs	r3, #1
 800535a:	e7f0      	b.n	800533e <_svfiprintf_r+0x192>
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <_svfiprintf_r+0x1f0>)
 8005364:	a904      	add	r1, sp, #16
 8005366:	4638      	mov	r0, r7
 8005368:	f3af 8000 	nop.w
 800536c:	1c42      	adds	r2, r0, #1
 800536e:	4606      	mov	r6, r0
 8005370:	d1d6      	bne.n	8005320 <_svfiprintf_r+0x174>
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	065b      	lsls	r3, r3, #25
 8005376:	f53f af2d 	bmi.w	80051d4 <_svfiprintf_r+0x28>
 800537a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800537c:	e72c      	b.n	80051d8 <_svfiprintf_r+0x2c>
 800537e:	ab03      	add	r3, sp, #12
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	462a      	mov	r2, r5
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <_svfiprintf_r+0x1f0>)
 8005386:	a904      	add	r1, sp, #16
 8005388:	4638      	mov	r0, r7
 800538a:	f000 f879 	bl	8005480 <_printf_i>
 800538e:	e7ed      	b.n	800536c <_svfiprintf_r+0x1c0>
 8005390:	08005824 	.word	0x08005824
 8005394:	0800582e 	.word	0x0800582e
 8005398:	00000000 	.word	0x00000000
 800539c:	080050f5 	.word	0x080050f5
 80053a0:	0800582a 	.word	0x0800582a

080053a4 <_printf_common>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4616      	mov	r6, r2
 80053aa:	4698      	mov	r8, r3
 80053ac:	688a      	ldr	r2, [r1, #8]
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bfb8      	it	lt
 80053b8:	4613      	movlt	r3, r2
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c0:	4607      	mov	r7, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	b10a      	cbz	r2, 80053ca <_printf_common+0x26>
 80053c6:	3301      	adds	r3, #1
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	6833      	ldrmi	r3, [r6, #0]
 80053d2:	3302      	addmi	r3, #2
 80053d4:	6033      	strmi	r3, [r6, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	f015 0506 	ands.w	r5, r5, #6
 80053dc:	d106      	bne.n	80053ec <_printf_common+0x48>
 80053de:	f104 0a19 	add.w	sl, r4, #25
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	6832      	ldr	r2, [r6, #0]
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dc26      	bgt.n	800543a <_printf_common+0x96>
 80053ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	3b00      	subs	r3, #0
 80053f4:	bf18      	it	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	0692      	lsls	r2, r2, #26
 80053fa:	d42b      	bmi.n	8005454 <_printf_common+0xb0>
 80053fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005400:	4641      	mov	r1, r8
 8005402:	4638      	mov	r0, r7
 8005404:	47c8      	blx	r9
 8005406:	3001      	adds	r0, #1
 8005408:	d01e      	beq.n	8005448 <_printf_common+0xa4>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	2b04      	cmp	r3, #4
 8005414:	bf02      	ittt	eq
 8005416:	68e5      	ldreq	r5, [r4, #12]
 8005418:	6833      	ldreq	r3, [r6, #0]
 800541a:	1aed      	subeq	r5, r5, r3
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	bf0c      	ite	eq
 8005420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005424:	2500      	movne	r5, #0
 8005426:	4293      	cmp	r3, r2
 8005428:	bfc4      	itt	gt
 800542a:	1a9b      	subgt	r3, r3, r2
 800542c:	18ed      	addgt	r5, r5, r3
 800542e:	2600      	movs	r6, #0
 8005430:	341a      	adds	r4, #26
 8005432:	42b5      	cmp	r5, r6
 8005434:	d11a      	bne.n	800546c <_printf_common+0xc8>
 8005436:	2000      	movs	r0, #0
 8005438:	e008      	b.n	800544c <_printf_common+0xa8>
 800543a:	2301      	movs	r3, #1
 800543c:	4652      	mov	r2, sl
 800543e:	4641      	mov	r1, r8
 8005440:	4638      	mov	r0, r7
 8005442:	47c8      	blx	r9
 8005444:	3001      	adds	r0, #1
 8005446:	d103      	bne.n	8005450 <_printf_common+0xac>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	3501      	adds	r5, #1
 8005452:	e7c6      	b.n	80053e2 <_printf_common+0x3e>
 8005454:	18e1      	adds	r1, r4, r3
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	2030      	movs	r0, #48	@ 0x30
 800545a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800545e:	4422      	add	r2, r4
 8005460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005468:	3302      	adds	r3, #2
 800546a:	e7c7      	b.n	80053fc <_printf_common+0x58>
 800546c:	2301      	movs	r3, #1
 800546e:	4622      	mov	r2, r4
 8005470:	4641      	mov	r1, r8
 8005472:	4638      	mov	r0, r7
 8005474:	47c8      	blx	r9
 8005476:	3001      	adds	r0, #1
 8005478:	d0e6      	beq.n	8005448 <_printf_common+0xa4>
 800547a:	3601      	adds	r6, #1
 800547c:	e7d9      	b.n	8005432 <_printf_common+0x8e>
	...

08005480 <_printf_i>:
 8005480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	7e0f      	ldrb	r7, [r1, #24]
 8005486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005488:	2f78      	cmp	r7, #120	@ 0x78
 800548a:	4691      	mov	r9, r2
 800548c:	4680      	mov	r8, r0
 800548e:	460c      	mov	r4, r1
 8005490:	469a      	mov	sl, r3
 8005492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005496:	d807      	bhi.n	80054a8 <_printf_i+0x28>
 8005498:	2f62      	cmp	r7, #98	@ 0x62
 800549a:	d80a      	bhi.n	80054b2 <_printf_i+0x32>
 800549c:	2f00      	cmp	r7, #0
 800549e:	f000 80d2 	beq.w	8005646 <_printf_i+0x1c6>
 80054a2:	2f58      	cmp	r7, #88	@ 0x58
 80054a4:	f000 80b9 	beq.w	800561a <_printf_i+0x19a>
 80054a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b0:	e03a      	b.n	8005528 <_printf_i+0xa8>
 80054b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054b6:	2b15      	cmp	r3, #21
 80054b8:	d8f6      	bhi.n	80054a8 <_printf_i+0x28>
 80054ba:	a101      	add	r1, pc, #4	@ (adr r1, 80054c0 <_printf_i+0x40>)
 80054bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c0:	08005519 	.word	0x08005519
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	080054a9 	.word	0x080054a9
 80054cc:	080054a9 	.word	0x080054a9
 80054d0:	080054a9 	.word	0x080054a9
 80054d4:	080054a9 	.word	0x080054a9
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080054a9 	.word	0x080054a9
 80054e0:	080054a9 	.word	0x080054a9
 80054e4:	080054a9 	.word	0x080054a9
 80054e8:	080054a9 	.word	0x080054a9
 80054ec:	0800562d 	.word	0x0800562d
 80054f0:	08005557 	.word	0x08005557
 80054f4:	080055e7 	.word	0x080055e7
 80054f8:	080054a9 	.word	0x080054a9
 80054fc:	080054a9 	.word	0x080054a9
 8005500:	0800564f 	.word	0x0800564f
 8005504:	080054a9 	.word	0x080054a9
 8005508:	08005557 	.word	0x08005557
 800550c:	080054a9 	.word	0x080054a9
 8005510:	080054a9 	.word	0x080054a9
 8005514:	080055ef 	.word	0x080055ef
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6032      	str	r2, [r6, #0]
 8005520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005528:	2301      	movs	r3, #1
 800552a:	e09d      	b.n	8005668 <_printf_i+0x1e8>
 800552c:	6833      	ldr	r3, [r6, #0]
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	1d19      	adds	r1, r3, #4
 8005532:	6031      	str	r1, [r6, #0]
 8005534:	0606      	lsls	r6, r0, #24
 8005536:	d501      	bpl.n	800553c <_printf_i+0xbc>
 8005538:	681d      	ldr	r5, [r3, #0]
 800553a:	e003      	b.n	8005544 <_printf_i+0xc4>
 800553c:	0645      	lsls	r5, r0, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0xb8>
 8005540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005544:	2d00      	cmp	r5, #0
 8005546:	da03      	bge.n	8005550 <_printf_i+0xd0>
 8005548:	232d      	movs	r3, #45	@ 0x2d
 800554a:	426d      	negs	r5, r5
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005550:	4859      	ldr	r0, [pc, #356]	@ (80056b8 <_printf_i+0x238>)
 8005552:	230a      	movs	r3, #10
 8005554:	e011      	b.n	800557a <_printf_i+0xfa>
 8005556:	6821      	ldr	r1, [r4, #0]
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	0608      	lsls	r0, r1, #24
 800555c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005560:	d402      	bmi.n	8005568 <_printf_i+0xe8>
 8005562:	0649      	lsls	r1, r1, #25
 8005564:	bf48      	it	mi
 8005566:	b2ad      	uxthmi	r5, r5
 8005568:	2f6f      	cmp	r7, #111	@ 0x6f
 800556a:	4853      	ldr	r0, [pc, #332]	@ (80056b8 <_printf_i+0x238>)
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	bf14      	ite	ne
 8005570:	230a      	movne	r3, #10
 8005572:	2308      	moveq	r3, #8
 8005574:	2100      	movs	r1, #0
 8005576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800557a:	6866      	ldr	r6, [r4, #4]
 800557c:	60a6      	str	r6, [r4, #8]
 800557e:	2e00      	cmp	r6, #0
 8005580:	bfa2      	ittt	ge
 8005582:	6821      	ldrge	r1, [r4, #0]
 8005584:	f021 0104 	bicge.w	r1, r1, #4
 8005588:	6021      	strge	r1, [r4, #0]
 800558a:	b90d      	cbnz	r5, 8005590 <_printf_i+0x110>
 800558c:	2e00      	cmp	r6, #0
 800558e:	d04b      	beq.n	8005628 <_printf_i+0x1a8>
 8005590:	4616      	mov	r6, r2
 8005592:	fbb5 f1f3 	udiv	r1, r5, r3
 8005596:	fb03 5711 	mls	r7, r3, r1, r5
 800559a:	5dc7      	ldrb	r7, [r0, r7]
 800559c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a0:	462f      	mov	r7, r5
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	460d      	mov	r5, r1
 80055a6:	d9f4      	bls.n	8005592 <_printf_i+0x112>
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10b      	bne.n	80055c4 <_printf_i+0x144>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07df      	lsls	r7, r3, #31
 80055b0:	d508      	bpl.n	80055c4 <_printf_i+0x144>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4299      	cmp	r1, r3
 80055b8:	bfde      	ittt	le
 80055ba:	2330      	movle	r3, #48	@ 0x30
 80055bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055c4:	1b92      	subs	r2, r2, r6
 80055c6:	6122      	str	r2, [r4, #16]
 80055c8:	f8cd a000 	str.w	sl, [sp]
 80055cc:	464b      	mov	r3, r9
 80055ce:	aa03      	add	r2, sp, #12
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fee6 	bl	80053a4 <_printf_common>
 80055d8:	3001      	adds	r0, #1
 80055da:	d14a      	bne.n	8005672 <_printf_i+0x1f2>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	b004      	add	sp, #16
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f043 0320 	orr.w	r3, r3, #32
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	4833      	ldr	r0, [pc, #204]	@ (80056bc <_printf_i+0x23c>)
 80055f0:	2778      	movs	r7, #120	@ 0x78
 80055f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6831      	ldr	r1, [r6, #0]
 80055fa:	061f      	lsls	r7, r3, #24
 80055fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005600:	d402      	bmi.n	8005608 <_printf_i+0x188>
 8005602:	065f      	lsls	r7, r3, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	6031      	str	r1, [r6, #0]
 800560a:	07d9      	lsls	r1, r3, #31
 800560c:	bf44      	itt	mi
 800560e:	f043 0320 	orrmi.w	r3, r3, #32
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b11d      	cbz	r5, 800561e <_printf_i+0x19e>
 8005616:	2310      	movs	r3, #16
 8005618:	e7ac      	b.n	8005574 <_printf_i+0xf4>
 800561a:	4827      	ldr	r0, [pc, #156]	@ (80056b8 <_printf_i+0x238>)
 800561c:	e7e9      	b.n	80055f2 <_printf_i+0x172>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	f023 0320 	bic.w	r3, r3, #32
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	e7f6      	b.n	8005616 <_printf_i+0x196>
 8005628:	4616      	mov	r6, r2
 800562a:	e7bd      	b.n	80055a8 <_printf_i+0x128>
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	6961      	ldr	r1, [r4, #20]
 8005632:	1d18      	adds	r0, r3, #4
 8005634:	6030      	str	r0, [r6, #0]
 8005636:	062e      	lsls	r6, r5, #24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	d501      	bpl.n	8005640 <_printf_i+0x1c0>
 800563c:	6019      	str	r1, [r3, #0]
 800563e:	e002      	b.n	8005646 <_printf_i+0x1c6>
 8005640:	0668      	lsls	r0, r5, #25
 8005642:	d5fb      	bpl.n	800563c <_printf_i+0x1bc>
 8005644:	8019      	strh	r1, [r3, #0]
 8005646:	2300      	movs	r3, #0
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	4616      	mov	r6, r2
 800564c:	e7bc      	b.n	80055c8 <_printf_i+0x148>
 800564e:	6833      	ldr	r3, [r6, #0]
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	6032      	str	r2, [r6, #0]
 8005654:	681e      	ldr	r6, [r3, #0]
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	2100      	movs	r1, #0
 800565a:	4630      	mov	r0, r6
 800565c:	f7fa fdc8 	bl	80001f0 <memchr>
 8005660:	b108      	cbz	r0, 8005666 <_printf_i+0x1e6>
 8005662:	1b80      	subs	r0, r0, r6
 8005664:	6060      	str	r0, [r4, #4]
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	2300      	movs	r3, #0
 800566c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005670:	e7aa      	b.n	80055c8 <_printf_i+0x148>
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	4632      	mov	r2, r6
 8005676:	4649      	mov	r1, r9
 8005678:	4640      	mov	r0, r8
 800567a:	47d0      	blx	sl
 800567c:	3001      	adds	r0, #1
 800567e:	d0ad      	beq.n	80055dc <_printf_i+0x15c>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	079b      	lsls	r3, r3, #30
 8005684:	d413      	bmi.n	80056ae <_printf_i+0x22e>
 8005686:	68e0      	ldr	r0, [r4, #12]
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	4298      	cmp	r0, r3
 800568c:	bfb8      	it	lt
 800568e:	4618      	movlt	r0, r3
 8005690:	e7a6      	b.n	80055e0 <_printf_i+0x160>
 8005692:	2301      	movs	r3, #1
 8005694:	4632      	mov	r2, r6
 8005696:	4649      	mov	r1, r9
 8005698:	4640      	mov	r0, r8
 800569a:	47d0      	blx	sl
 800569c:	3001      	adds	r0, #1
 800569e:	d09d      	beq.n	80055dc <_printf_i+0x15c>
 80056a0:	3501      	adds	r5, #1
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	9903      	ldr	r1, [sp, #12]
 80056a6:	1a5b      	subs	r3, r3, r1
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dcf2      	bgt.n	8005692 <_printf_i+0x212>
 80056ac:	e7eb      	b.n	8005686 <_printf_i+0x206>
 80056ae:	2500      	movs	r5, #0
 80056b0:	f104 0619 	add.w	r6, r4, #25
 80056b4:	e7f5      	b.n	80056a2 <_printf_i+0x222>
 80056b6:	bf00      	nop
 80056b8:	08005835 	.word	0x08005835
 80056bc:	08005846 	.word	0x08005846

080056c0 <memmove>:
 80056c0:	4288      	cmp	r0, r1
 80056c2:	b510      	push	{r4, lr}
 80056c4:	eb01 0402 	add.w	r4, r1, r2
 80056c8:	d902      	bls.n	80056d0 <memmove+0x10>
 80056ca:	4284      	cmp	r4, r0
 80056cc:	4623      	mov	r3, r4
 80056ce:	d807      	bhi.n	80056e0 <memmove+0x20>
 80056d0:	1e43      	subs	r3, r0, #1
 80056d2:	42a1      	cmp	r1, r4
 80056d4:	d008      	beq.n	80056e8 <memmove+0x28>
 80056d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056de:	e7f8      	b.n	80056d2 <memmove+0x12>
 80056e0:	4402      	add	r2, r0
 80056e2:	4601      	mov	r1, r0
 80056e4:	428a      	cmp	r2, r1
 80056e6:	d100      	bne.n	80056ea <memmove+0x2a>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056f2:	e7f7      	b.n	80056e4 <memmove+0x24>

080056f4 <_sbrk_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	@ (8005710 <_sbrk_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fb fe44 	bl	800138c <_sbrk>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_sbrk_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_sbrk_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000354 	.word	0x20000354

08005714 <memcpy>:
 8005714:	440a      	add	r2, r1
 8005716:	4291      	cmp	r1, r2
 8005718:	f100 33ff 	add.w	r3, r0, #4294967295
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	4770      	bx	lr
 8005720:	b510      	push	{r4, lr}
 8005722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572a:	4291      	cmp	r1, r2
 800572c:	d1f9      	bne.n	8005722 <memcpy+0xe>
 800572e:	bd10      	pop	{r4, pc}

08005730 <_realloc_r>:
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	4680      	mov	r8, r0
 8005736:	4615      	mov	r5, r2
 8005738:	460c      	mov	r4, r1
 800573a:	b921      	cbnz	r1, 8005746 <_realloc_r+0x16>
 800573c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005740:	4611      	mov	r1, r2
 8005742:	f7ff bc4b 	b.w	8004fdc <_malloc_r>
 8005746:	b92a      	cbnz	r2, 8005754 <_realloc_r+0x24>
 8005748:	f7ff fbdc 	bl	8004f04 <_free_r>
 800574c:	2400      	movs	r4, #0
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	f000 f81a 	bl	800578c <_malloc_usable_size_r>
 8005758:	4285      	cmp	r5, r0
 800575a:	4606      	mov	r6, r0
 800575c:	d802      	bhi.n	8005764 <_realloc_r+0x34>
 800575e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005762:	d8f4      	bhi.n	800574e <_realloc_r+0x1e>
 8005764:	4629      	mov	r1, r5
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fc38 	bl	8004fdc <_malloc_r>
 800576c:	4607      	mov	r7, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	d0ec      	beq.n	800574c <_realloc_r+0x1c>
 8005772:	42b5      	cmp	r5, r6
 8005774:	462a      	mov	r2, r5
 8005776:	4621      	mov	r1, r4
 8005778:	bf28      	it	cs
 800577a:	4632      	movcs	r2, r6
 800577c:	f7ff ffca 	bl	8005714 <memcpy>
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fbbe 	bl	8004f04 <_free_r>
 8005788:	463c      	mov	r4, r7
 800578a:	e7e0      	b.n	800574e <_realloc_r+0x1e>

0800578c <_malloc_usable_size_r>:
 800578c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005790:	1f18      	subs	r0, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfbc      	itt	lt
 8005796:	580b      	ldrlt	r3, [r1, r0]
 8005798:	18c0      	addlt	r0, r0, r3
 800579a:	4770      	bx	lr

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
